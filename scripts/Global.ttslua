-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTANTS

CARD_BACK_IMAGE = "http://cloud-3.steamusercontent.com/ugc/482272972286453570/660AD27C5F3A9BA42322C99BE5E4BD3F0AF8F91B/"

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CLASSES

-- an object representing the settings used to input a custom board
BoardSettings = {
    -- the randomizers used for this kingdom (only 1-10)
    kingdom = {--[["Cellar", "Chapel", "Sauna / Avanto", ...]]},
    -- the randomizer sideways cards used for this board
    sideways = {--[["Alms", "Exploration"]]},
    -- other features and settings for this board (anything that isn't kingdom or sideways)
    otherSettings = {--[[["Black Market"] = {"foo", "bar"}, ["Bane"] = "thing", ["Obelisk Target"] = "another thing", ["Use Plat"] = true]]},
    -- how many players the board should be set up for
    playerCount = nil,
    -- what turn order the colors are in
    turnOrder = {},
    -- whether or not this settings object is valid data or not
    isDirty = false,

    -- how many unknowns there are of each name (used for ReadSettings)
    unknownNames = {},

    -- object constructor
    New = function(self, params)
        local o = {}
        for key, value in pairs(self) do
            if type(value) == "table" then
                o[key] = {}
            end
        end
        setmetatable(o, {__index = self})

        if params and params.kingdom then
            o:SetKingdom(unpack(params.kingdom))
        end
        if params and params.sideways then
            o:SetSideways(unpack(params.sideways))
        end
        if params and params.other then
            for key, value in pairs(params.other) do
                o:AddOther(key, value)
            end
        end

        return o
    end,

    -- set the kingdom to a list of randomizer card names
    SetKingdom = function(self, ...)
        if not ... then return end
        self.kingdom = {...}
    end,
    -- set the sideways cards to a list of randomizer card names
    SetSideways = function(self, ...)
        if not ... then return end
        self.sideways = {...}
    end,
    -- add (or overwrite) an other setting for this board
    AddOther = function(self, key, value)
        if type(value) == "table" then
            value = table.copy(value)
        end
        self.otherSettings[key] = value
    end,
    -- sets the player count to how many players are seated or whatever value is
    SetPlayerCount = function(self, value)
        value = value or getSeatedPlayerCount()
        self.playerCount = value
    end,
    SetTurnOrder = function(self, firstPlayerColor)
        local startIndex = hasValue(players, firstPlayerColor)
        if startIndex then
            self.turnOrder = {}
            for i = startIndex, (#players - 1) + startIndex do
                table.insert(self.turnOrder, players[((i - 1) % (#players)) + 1])
            end
        end
    end,

    -- parses the settings that should be used for this board from the contents of the board
    -- calls the card's getSettings function which should add other settings to the board settings using AddOther
    ReadSettings = function(self)
        -- get all kingdom names
        local kingdomNames = {}
        for _, zone in ipairs(objects.supply.kingdomZones) do
            local name = self:ReadSlot(zone)
            if name then
                table.insert(kingdomNames, name)
            elseif name == false then
                self.isDirty = true
                return
            end
        end
        self:SetKingdom(unpack(kingdomNames))

        -- get all sideways names
        local sidewaysNames = {}
        for _, zone in ipairs(objects.supply.eventZones) do
            local name = self:ReadSlot(zone)
            if name then
                table.insert(sidewaysNames, name)
            elseif name == false then
                self.isDirty = true
                return
            end
        end
        self:SetSideways(unpack(sidewaysNames))

        -- finally set player count
        self:SetPlayerCount()
    end,
    -- parses what is inside a single slot of the board and returns the name of what is in it
    -- returns nil if nothing is found
    -- returns false if there is an error reading
    ReadSlot = function(self, zone)
        local cardsInZone = getAllCardsInZone(zone)
        if #cardsInZone > 1 then return false end
        if #cardsInZone < 1 then return nil end
        local obj = cardsInZone[1]
        if #obj.getZones() > 1 then return false end
        if obj.type == "Deck" then return false end

        local name = obj.getName()

        if not cards[name] then
            if self.unknownNames[name] then
                self.unknownNames[name] = self.unknownNames[name] + 1
                local newName = name
                if not (newName == "") then newName = newName .. " " end
                newName = newName .. "(" .. self.unknownNames[name] .. ")"
                obj.setName(newName)
                name = newName
            else
                self.unknownNames[name] = 1
            end
        end

        return name
    end,
    -- parses what is inside a single slot of the board and returns a table of all names of what is in it
    -- use when you're reading the contents of a deck in a slot
    -- returns nil if nothing is found
    -- returns false if there is an error reading
    ReadSlotTable = function(self, zone)
        local names = {}

        local cardsInZone = getAllCardsInZone(zone)
        if #cardsInZone > 1 then return false end
        if #cardsInZone < 1 then return names end
        local obj = cardsInZone[1]
        if #obj.getZones() > 1 then return false end
        if obj.type == "Deck" then
            for _, o in ipairs(obj.getObjects()) do
                table.insert(names, o.name)
            end
        else
            table.insert(names, obj.getName())
        end

        return names
    end,

    -- validates whehter or not the settings are a legal game of dominion
    -- if debug is true then it is a lot more lenient
    ValidateSettings = function(self, debug)
        if self.isDirty then return false end

        if not debug and #self.kindom ~= 10 then
            return false
        end
        for i, name in ipairs(self.kingdom) do
            if cards[name] and cards[name].class and not hasValue(cards[name].class, "Kingdom") then
                return false
            end
            for i2, name2 in ipairs(self.kingdom) do
                if i2 ~= i and name2 == name then
                    return false
                end
            end
        end
        for i, name in ipairs(self.sideways) do
            if cards[name] and cards[name].class and not hasValue(cards[name].class, "Sideways") then
                return false
            end
            for i2, name2 in ipairs(self.sideways) do
                if i2 ~= i and name2 == name then
                    return false
                end
            end
        end

        return true
    end
}

-- an object defining a dominion board and every feature inside it
Board = {
    -- the names of the cards in each kingdom pile in order 1-10 as well as other piles that are part of the kingdom (Bane, etc)
    kingdom = {--[[
        {
            randomizer = "Cellar",
            contents = {"Cellar"},
        }
        {
            randomizer = "Sauna / Avanto",
            contents = {"Sauna", "Avanto"}
        }
    ]]},
    -- other kingdom piles that are not 1-10 (needed so JSON.encode works)
    otherKingdom = {--[[["Bane"] = {...}]]},
    -- the names of the cards in each sideways slot in order left to right
    sideways = {--[["Alms", "Exploration"]]},
    -- other sideways slots that are not 1-4 (needed so JSON.encode works)
    otherSideways = {--[[["Bane"] = "foobar"]]},
    -- the names of the basic piles (not cards themselves) and the cards inside those piles
    basics = {--[[["Coppers"] = {"Copper"}, ..., ["Ruins"] = {"Survivors", ...}]]},
    -- the names of the non-Supply cards used in this game keyed by the name of the pile they are in
    nonSupply = {--[[["Horse Pile"] = {"Horse"}, ["Prizes"] = {"Bag of Gold", ...}]]},
    -- the names of tokens and mats used this game as a set
    matsAndTokens = {--[[["Tavern Mat"] = true, ...]]},
    -- the names of extra piles and what cards are needed in those piles (not all cards from a pile must be included just the ones that are needed for this board)
    -- every entry (even ones with single cards) must be tables
    extras = {--[[["Artifacts"] = {"Horn", "Lantern"}, ["Boons"] = {"foo", "bar", ...}, ["Zombies"] = {"foo", ...}]]},
    -- the names of cards that are starting in player's decks
    startingCards = {--[["Copper", "Estate", "Pouch"]]},
    -- names of other features and the cards inside them as well as other options about the board state
    -- (these features are not handled by the board and must be setup by the card that uses them)
    otherFeatures = {--[[["Black Market"] = {"foo", "bar", ...}, ["Obelisk Target"] = {"foo", "bar"}]]},
    -- the settings used to initialize this board
    boardSettings = {--[[see BoardSettings above]]},
    -- whether this board data ever got dirty during SetBoard
    -- if a card's function runs into an error then it should broadcast the error and set this flag to true
    isDirty = false,
    coroutinesRunning = 0,

    -- object constructor
    New = function(self)
        local o = {}
        for key, value in pairs(self) do
            if type(value) == "table" then
                o[key] = {}
            end
        end
        setmetatable(o, {__index = self})
        return o
    end,

    --[[
    Functions used to recursively add features to this board
    Every function below will return a string as an error message if an error occured or nil if no error
    --]]

    -- adds a group of names to the next kingdom pile and calls setup on those cards
    -- contents is the name of the randomizer card added
    -- key is optional and is used for adding other kingdom piles (Bane, etc)
    AddKingdomPile = function(self, name, key)
        assert(type(key) == "string" or key == nil, "ERROR: Failed to add Kingdom card. Key must be a string.")
        local key = key or #self.kingdom + 1
        assert(type(key) == "string" or (type(key) == "number" and key <= #objects.supply.kingdomZones and key > 0), "ERROR: Attempted to add a kingdom pile out of bounds.")
        if not name then return end
        assert(type(name) == "string", "ERROR: Failed to add Kingdom card. Name must be a string.")
        local contents = nil
        local isContentsDifferent = false
        if cards[name] and cards[name].replacement then
            if replacementPiles[cards[name].replacement] and replacementPiles[cards[name].replacement].contents then
                if type(replacementPiles[cards[name].replacement].contents) == "table" then
                    contents = table.copy(replacementPiles[cards[name].replacement].contents)
                else
                    contents = {replacementPiles[cards[name].replacement].contents}
                end
                isContentsDifferent = true
            else
                printToAll("Couldn't find replacement for card "..name..".", Color.Yellow)
            end
        end
        if contents then
            for _, value in pairs(contents) do
                assert(type(value) == "string", "ERROR: Failed to add Kingdom card. Replacement pile contents must contain strings.")
            end
        else
            contents = {name}
        end

        if type(key) == "number" then
            if not self.kingdom[key] then
                self.kingdom[key] = {
                    randomizer = name,
                    contents = contents
                }
                self:GetDependencies(name)
                if isContentsDifferent then self:GetDependencies(contents) end
            end
        elseif type(key) == "string" then
            if not self.otherKingdom[key] then
                self.otherKingdom[key] = {
                    randomizer = name,
                    contents = contents
                }
                self:GetDependencies(name)
                if isContentsDifferent then self:GetDependencies(contents) end
            end
        end
    end,
    -- adds a card name to the next sideways slot (unlike other piles there can only be one card per sideways)
    -- contents is the name of the randomizer card added
    -- key is optional and is used for adding other kingdom piles (like Bane, etc)
    AddSidewaysCard = function(self, name, key)
        assert(type(key) == "string" or key == nil, "ERROR: Failed to add Sideways card. Key must be a string.")
        local key = key or #self.sideways + 1
        assert(type(key) == "string" or (type(key) == "number" and key <= #objects.supply.eventZones and key > 0), "ERROR: Attempted to add a sideways card out of bounds.")
        if not name then return end
        assert(type(name) == "string", "ERROR: Failed to add Sideways card. Name must be a string.")

        if type(key) == "number" then
            if not self.sideways[key] then
                self.sideways[key] = name
                self:GetDependencies(name)
            end
        elseif type(key) == "string" then
            if not self.otherSideways[key] then
                self.otherSideways[key] = name
                self:GetDependencies(name)
            end
        end
    end,
    -- adds a pile name to the next basic pile (pile names are different from card names)
    AddBasicPile = function(self, key)
        if not key then return end
        assert(type(key) == "string", "ERROR: Failed to add Basic Pile. Key must be a string.")
        local contents = nil
        if basicPiles[key] and basicPiles[key].contents then
            if type(basicPiles[key].contents) == "table" then
                contents = table.copy(basicPiles[key].contents)
            else
                contents = {basicPiles[key].contents}
            end
        end
        if not contents then return end
        if type(contents) == "table" then
            for _, value in pairs(contents) do
                assert(type(value) == "string", "ERROR: Failed to add Basic pile. Basic pile contents must contain strings.")
            end
        end

        if not self.basics[key] then
            self.basics[key] = contents
            self:GetDependencies(contents)
        end
    end,
    -- adds a group of names to the given non-Supply pile name
    -- this is handled automatically when a card is added to the board
    AddNonSupplyPile = function(self, key)
        if not key then return end
        assert(type(key) == "string", "ERROR: Failed to add non-Supply Pile. Key must be a string.")
        local contents = nil
        if nonSupplyPiles[key] and nonSupplyPiles[key].contents then
            if type(nonSupplyPiles[key].contents) == "table" then
                contents = table.copy(nonSupplyPiles[key].contents)
            else
                contents = {nonSupplyPiles[key].contents}
            end
        end
        if not contents then return end
        if type(contents) == "table" then
            for _, value in pairs(contents) do
                assert(type(value) == "string", "ERROR: Failed to add non-Supply pile. Non-Supply pile contents must contain strings.")
            end
        end

        if not self.nonSupply[key] then
            self.nonSupply[key] = contents
            self:GetDependencies(contents)
        end
    end,
    -- adds a mat or token name to the mats and tokens used on this board
    -- this is handled automatically when a card is added to the board
    AddMatOrToken = function(self, key)
        if not key then return end
        assert(type(key) == "string", "ERROR: Failed to add Mat or Token. Key must be a string.")
        if not matsAndTokens[key] then return end

        if not self.matsAndTokens[key] then
            self.matsAndTokens[key] = true
            if matsAndTokens[key] and matsAndTokens[key].getDependencies then
                matsAndTokens[key].getDependencies(self, self.boardSettings)
            end
        end
    end,
    -- adds an extra (artifacts, boons, etc) to this board
    -- this is handled automatically when a card is added to the board
    -- contents can be a table of what cards in this extra pack are needed or true to include all cards
    AddExtra = function(self, key, contents)
        if not key then return end
        assert(type(key) == "string", "ERROR: Failed to add Extra. Key must be a string.")
        if not contents then return end
        assert(type(contents) == "string" or type(contents) == "table" or type(contents) == "boolean", "ERROR: Failed to add Extra. Contents must be a string, table, or boolean.")
        if contents == true then
            if extras[key] and extras[key].contents then
                if type(extras[key].contents == "table") then
                    contents = table.copy(extras[key].contents)
                else
                    contents = {extras[key].contents}
                end
            end
        end
        if contents == true then return end
        if type(contents) == "table" then
            for _, value in pairs(contents) do
                assert(type(value) == "string", "ERROR: Failed to add Extra. Extra contents must contain strings.")
            end
        end

        if self.extras[key] then
            local set1 = set.new((type(self.extras[key]) ~= "table" and {self.extras[key]}) or self.extras[key])
            local set2 = set.new((type(contents) ~= "table" and {contents}) or contents)
            self.extras[key] = set.toTable(set1 + set2)
            contents = set.toTable(set2 - set1)
        else
            self.extras[key] = contents
        end
        self:GetDependencies(contents)
    end,
    -- adds a starting card found in player's starting decks to the board
    AddStartingCard = function(self, name)
        if not name then return end
        assert(type(name) == "string", "ERROR: Failed to add Starting card. Name must be a string.")

        if not hasValue(self.startingCards, name) then
            self.startingCards[#self.startingCards + 1] = name
            self:GetDependencies(name)
        end
    end,
    -- adds some other unknown feature to this board.
    -- DOES NOT call GetDependencies on that card. You must do it yourself if you need to get them.
    -- returns true if the features added were new (and need to have GetDependencies called)
    AddOtherFeature = function(self, key, value)
        if not key then return end
        if not value then return end
        assert(type(key) == "string", "ERROR: Failed to add Other feature. Key must be a string.")
        if type(value) == "table" then
            for _, v in pairs(value) do
                assert(type(v) ~= "table", "ERROR: Failed to add Other feature. Value cannot be a table of tables.")
            end
            value = table.copy(value)
        end

        if not self.otherFeatures[key] then
            self.otherFeatures[key] = value
            return true
        end
    end,

    -- gets all the dependencies for this card or cards in a table and adds them to the board as well
    -- cardName can be a string or a table of strings
    GetDependencies = function(self, cardName)
        if not cardName then return end
        if self.isDirty then return end

        if type(cardName) == "table" then
            for i, name in ipairs(cardName) do
                self:GetDependencies(name)
            end
        elseif type(cardName) == "string" then
            if cards[cardName] then
                -- first look for non-Supply cards this card needs
                if cards[cardName].nonSupply then
                    if type(cards[cardName].nonSupply) == "table" then
                        for _, value in ipairs(cards[cardName].nonSupply) do
                            self:AddNonSupplyPile(value)
                        end
                    else
                        self:AddNonSupplyPile(cards[cardName].nonSupply)
                    end
                end
                -- look for mats and tokens this card needs
                if cards[cardName].matsAndTokens then
                    if type(cards[cardName].matsAndTokens) == "table" then
                        for _, value in ipairs(cards[cardName].matsAndTokens) do
                            self:AddMatOrToken(value)
                        end
                    else
                        self:AddMatOrToken(cards[cardName].matsAndTokens)
                    end
                end
                -- Look for extras this card needs
                if cards[cardName].extras then
                    for key, value in pairs(cards[cardName].extras) do
                        self:AddExtra(key, value)
                    end
                end

                -- call getDependencies for this card
                if not self.isDirty then callCardEvent(cardName, "getDependencies", self, self.boardSettings) end
            end
        end
    end,

    -- returns a table of what randomizers are used in each kingdom slot
    GetKingdomRandomizers = function(self)
        local output = {}
        for i, t in ipairs(self.kingdom) do
            output[i] = t.randomizer
        end
        for k, t in pairs(self.otherKingdom) do
            output[k] = t.randomizer
        end
        return output
    end,
    -- returns a table of what cards are used in each kingdom slot
    GetKingdomContentsTable = function(self)
        local output = {}
        for i, t in ipairs(self.kingdom) do
            output[i] = t.contents
        end
        for k, t in pairs(self.otherKingdom) do
            output[k] = t.contents
        end
        return output
    end,
    -- returns an array of what cards are used in the entire kingdom
    GetKingdomContentsArray = function(self)
        local output = {}
        for i, t in ipairs(self.kingdom) do
            for _, name in ipairs(t.contents) do
                table.insert(output, name)
            end
        end
        for k, t in pairs(self.otherKingdom) do
            for _, name in ipairs(t.contents) do
                table.insert(output, name)
            end
        end
        return output
    end,
    -- returns a table of what cards are used in each sideways slot
    GetSideways = function(self)
        local output = {}
        for i, t in ipairs(self.sideways) do
            output[i] = t
        end
        for k, t in pairs(self.otherSideways) do
            output[k] = t
        end
        return output
    end,
    -- returns a set of all objects in this board that are needed and should not be deleted
    GetDependenciesSet = function(self)
        local s = set.new()
        -- get basics
        for name in pairs(self.basics) do
            set.insert(s, name)
        end
        -- get other kingdom
        for name in pairs(self.otherKingdom) do
            set.insert(s, name)
        end
        -- get other sideways
        for name in pairs(self.otherSideways) do
            set.insert(s, name)
        end
        -- get nonSupply
        for name in pairs(self.nonSupply) do
            set.insert(s, name)
        end
        -- get matsAndTokens
        for name in pairs(self.matsAndTokens) do
            set.insert(s, name)
        end
        -- get extras
        for name in pairs(self.extras) do
            set.insert(s, name)
        end
        return s
    end,

    -- clears this board object
    ClearBoard = function(self)
        self.kingdom = {}
        self.sideways = {}
        self.basics = {}
        self.nonSupply = {}
        self.matsAndTokens = {}
        self.extras = {}
        self.otherFeatures = {}
        self.boardSettings = {}
    end,
    -- sets this board with a given settings object
    SetBoard = function(self, settings)
        -- create a copy of settings
        self.boardSettings = BoardSettings:New()
        self.boardSettings:SetKingdom(unpack(settings.kingdom))
        self.boardSettings:SetSideways(unpack(settings.sideways))
        for k, v in pairs(settings.otherSettings) do
            self.boardSettings:AddOther(k, v)
        end
        self.boardSettings:SetPlayerCount(settings.playerCount)

        -- get the dependencies from general board rules
        for _, t in pairs(BOARD_RULES) do
            if t.getDependencies then
                t.getDependencies(self, self.boardSettings)
            end
        end

        -- add kingdom cards
        for _, v in ipairs(self.boardSettings.kingdom) do
            self:AddKingdomPile(v)
        end
        -- add sideways cards
        for _, v in ipairs(self.boardSettings.sideways) do
            self:AddSidewaysCard(v)
        end
    end,

    -- sorts the kingdom and sideways tables
    Sort = function(self)
        table.sort(self.kingdom, function(a, b) return sort(a.randomizer, b.randomizer) end)
        table.sort(self.sideways, sort)
    end
}

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// DEFINITIONS

-- a list of every useful guid
-- gets converted into object references inside onLoad and stored into objects
guids = {
    -- objects used by and in front of each player
    players = {
        Pink = {
            tokens = {
                ["Victory Points"]  = "1a8a90",
                ["Coffers"]         = "4c451c",
                ["Debt"]            = "2ba471",
                ["Villagers"]       = "89f6fb",
                ["Pirate Coins"]    = "07ec19",
                ["-1 Card Token"]   = "2f4572",
                ["-1 Coin Token"]   = "b56d40",
                ["-2 Cost Token"]   = "dd4db1",
                ["Trashing Token"]  = "ef949d",
                ["Estate Token"]    = "1a0ffd",
                ["Journey Token"]   = "6be8c5",
                ["+1 Card Token"]   = "c8b5e2",
                ["+1 Action Token"] = "96e1ef",
                ["+1 Coin Token"]   = "7b25b3",
                ["+1 Buy Token"]    = "8c6b69",
                ["Owns Project"]    = { "f89471", "e1aa16" },   -- top then bottom token
                ["Set Aside"]       = "18fe35"
            },
            mats = {
                ["Exile Mat"]          = "8c43c7",
                ["Tavern Mat"]         = "73b44f",
                ["Native Village Mat"] = "3f337f",
                ["Island Mat"]         = "1f1d47",
                ["Deck"]               = "dc840a",
                ["Discard"]            = "806f43",
                ["Player Mat"]         = "82d604"
            },
            zones = {
                ["Deck"]       = "161880",
                ["Discard"]    = "eca8c0",
                ["Tavern Mat"] = "b742a1",
                ["Player Mat"] = "66d256",
                ["Hand"]       = "f1cdee"
            }
        },
        Green = {
            tokens = {
                ["Victory Points"]  = "318b12",
                ["Coffers"]         = "1a8770",
                ["Debt"]            = "048389",
                ["Villagers"]       = "5134b3",
                ["Pirate Coins"]    = "4de60b",
                ["-1 Card Token"]   = "5c4411",
                ["-1 Coin Token"]   = "f27cdd",
                ["-2 Cost Token"]   = "2e7fb1",
                ["Trashing Token"]  = "0a3d69",
                ["Estate Token"]    = "ed137a",
                ["Journey Token"]   = "c77f32",
                ["+1 Card Token"]   = "e53945",
                ["+1 Action Token"] = "b6993b",
                ["+1 Coin Token"]   = "322915",
                ["+1 Buy Token"]    = "d683bf",
                ["Owns Project"]    = { "753f52", "53d51a" },   -- top then bottom token
                ["Set Aside"]       = "bfdd72"
            },
            mats = {
                ["Exile Mat"]          = "41ff7f",
                ["Tavern Mat"]         = "0c3771",
                ["Native Village Mat"] = "2fa2e2",
                ["Island Mat"]         = "a58748",
                ["Deck"]               = "996e9f",
                ["Discard"]            = "b6f3bc",
                ["Player Mat"]         = "10b5cc"
            },
            zones = {
                ["Deck"]       = "3e5cfc",
                ["Discard"]    = "44c6e3",
                ["Tavern Mat"] = "e53225",
                ["Player Mat"] = "875144",
                ["Hand"]       = "8774ef"
            }
        },
        White = {
            tokens = {
                ["Victory Points"]  = "fd9212",
                ["Coffers"]         = "f6bff9",
                ["Debt"]            = "a5991e",
                ["Villagers"]       = "71247d",
                ["Pirate Coins"]    = "31e422",
                ["-1 Card Token"]   = "c805b3",
                ["-1 Coin Token"]   = "60da3b",
                ["-2 Cost Token"]   = "b1f09d",
                ["Trashing Token"]  = "65caf8",
                ["Estate Token"]    = "a4e501",
                ["Journey Token"]   = "467620",
                ["+1 Card Token"]   = "9afa9c",
                ["+1 Action Token"] = "99e974",
                ["+1 Coin Token"]   = "f5ffde",
                ["+1 Buy Token"]    = "11b9ad",
                ["Owns Project"]    = { "7056a3", "d3baa9" },   -- top then bottom token
                ["Set Aside"]       = "4d4d24"
            },
            mats = {
                ["Exile Mat"]          = "b84b53",
                ["Tavern Mat"]         = "4caf71",
                ["Native Village Mat"] = "fd4653",
                ["Island Mat"]         = "cae961",
                ["Deck"]               = "e4c378",
                ["Discard"]            = "c50c38",
                ["Player Mat"]         = "f20217"
            },
            zones = {
                ["Deck"]       = "f2146c",
                ["Discard"]    = "b48e02",
                ["Tavern Mat"] = "50c9ee",
                ["Player Mat"] = "be0568",
                ["Hand"]       = "6d780e"
            }
        },
        Red = {
            tokens = {
                ["Victory Points"]  = "a5bdfe",
                ["Coffers"]         = "a838ad",
                ["Debt"]            = "13cb98",
                ["Villagers"]       = "9ab08c",
                ["Pirate Coins"]    = "d114f5",
                ["-1 Card Token"]   = "01d25d",
                ["-1 Coin Token"]   = "ec3692",
                ["-2 Cost Token"]   = "2ccfa3",
                ["Trashing Token"]  = "e4ac77",
                ["Estate Token"]    = "2e6a7f",
                ["Journey Token"]   = "65676a",
                ["+1 Card Token"]   = "025ab0",
                ["+1 Action Token"] = "90b742",
                ["+1 Coin Token"]   = "cb6417",
                ["+1 Buy Token"]    = "1621d1",
                ["Owns Project"]    = { "b7dc65", "081686" },   -- top then bottom token
                ["Set Aside"]       = "65bcd7"
            },
            mats = {
                ["Exile Mat"]          = "c175d2",
                ["Tavern Mat"]         = "3932e5",
                ["Native Village Mat"] = "8d8bb1",
                ["Island Mat"]         = "47484f",
                ["Deck"]               = "53b5fb",
                ["Discard"]            = "bb969d",
                ["Player Mat"]         = "2fa48d"
            },
            zones = {
                ["Deck"]       = "5eca2b",
                ["Discard"]    = "16c9ce",
                ["Tavern Mat"] = "f1a05f",
                ["Player Mat"] = "089ee2",
                ["Hand"]       = "13c587"
            }
        },
        Blue = {
            tokens = {
                ["Victory Points"]  = "460fc7",
                ["Coffers"]         = "f9b793",
                ["Debt"]            = "359c7d",
                ["Villagers"]       = "9164ca",
                ["Pirate Coins"]    = "6a1b94",
                ["-1 Card Token"]   = "bd7bd7",
                ["-1 Coin Token"]   = "d7c452",
                ["-2 Cost Token"]   = "e29300",
                ["Trashing Token"]  = "af8ff3",
                ["Estate Token"]    = "4b9e5b",
                ["Journey Token"]   = "14f400",
                ["+1 Card Token"]   = "6b586f",
                ["+1 Action Token"] = "5959d0",
                ["+1 Coin Token"]   = "28e8f5",
                ["+1 Buy Token"]    = "04fed4",
                ["Owns Project"]    = { "356ba6", "fa4179" },   -- top then bottom token
                ["Set Aside"]       = "461fcf"
            },
            mats = {
                ["Exile Mat"]          = "b2c72e",
                ["Tavern Mat"]         = "76e257",
                ["Native Village Mat"] = "62814d",
                ["Island Mat"]         = "f42e05",
                ["Deck"]               = "a044b0",
                ["Discard"]            = "d90a4d",
                ["Player Mat"]         = "a2a688"
            },
            zones = {
                ["Deck"]       = "dde784",
                ["Discard"]    = "34fc95",
                ["Tavern Mat"] = "dca674",
                ["Player Mat"] = "8313c1",
                ["Hand"]       = "6f479c"
            }
        },
        Yellow = {
            tokens = {
                ["Victory Points"]  = "48c7fe",
                ["Coffers"]         = "0f2f7e",
                ["Debt"]            = "d26450",
                ["Villagers"]       = "e9311d",
                ["Pirate Coins"]    = "f39723",
                ["-1 Card Token"]   = "ffca2f",
                ["-1 Coin Token"]   = "d866a0",
                ["-2 Cost Token"]   = "85112e",
                ["Trashing Token"]  = "4fac52",
                ["Estate Token"]    = "78b646",
                ["Journey Token"]   = "79f6b5",
                ["+1 Card Token"]   = "ce8a91",
                ["+1 Action Token"] = "3d3cd3",
                ["+1 Coin Token"]   = "060245",
                ["+1 Buy Token"]    = "20603e",
                ["Owns Project"]    = { "e891e5", "13557d" },   -- top then bottom token
                ["Set Aside"]       = "593fbd"
            },
            mats = {
                ["Exile Mat"]          = "6bab0a",
                ["Tavern Mat"]         = "38103f",
                ["Native Village Mat"] = "52a2e8",
                ["Island Mat"]         = "5c7e33",
                ["Deck"]               = "cda6b9",
                ["Discard"]            = "d223fd",
                ["Player Mat"]         = "eae7df"
            },
            zones = {
                ["Deck"]       = "1fed5b",
                ["Discard"]    = "7916e6",
                ["Tavern Mat"] = "e57747",
                ["Player Mat"] = "37eaed",
                ["Hand"]       = "62384f"
            }
        }
    },
    -- all piles, mats, and zones that make up the supply
    supply = {
        basicPiles = {
            ["Potion"]   = "475de7",
            ["Copper"]   = "3a738e",
            ["Silver"]   = "a655a3",
            ["Gold"]     = "b11add",
            ["Platinum"] = "85fcca",
            ["Curse"]    = "d9a2c0",
            ["Estate"]   = "4d0b0e",
            ["Duchy"]    = "d253c8",
            ["Province"] = "4a8334",
            ["Colony"]   = "6ce695",
            ["Ruins"]    = "2adf43"
        },
        basicPileMats = {
            ["Potion"]   = "4f1bdf",
            ["Copper"]   = "b53849",
            ["Silver"]   = "1e6bc9",
            ["Gold"]     = "1a390b",
            ["Platinum"] = "9a7cde",
            ["Curse"]    = "2b624e",
            ["Estate"]   = "fc44d0",
            ["Duchy"]    = "c80e6c",
            ["Province"] = "46e094",
            ["Colony"]   = "f22317",
            ["Ruins"]    = "624106"
        },
        basicPileZones = {
            ["Potion"]   = "772aa2",
            ["Copper"]   = "99c438",
            ["Silver"]   = "fa1a9e",
            ["Gold"]     = "82989a",
            ["Platinum"] = "3ed99d",
            ["Curse"]    = "6555c4",
            ["Estate"]   = "3c7d82",
            ["Duchy"]    = "abbc0e",
            ["Province"] = "16a085",
            ["Colony"]   = "4e8983",
            ["Ruins"]    = "e7b423"
        },
        kingdomMats = {
            -- from left to right and then top to bottom
            "cce6c6",
            "f6f74b",
            "c5c45f",
            "66771c",
            "a83f0c",
            "aea721",
            "6eaafe",
            "acddb6",
            "e7d6f7",
            "691cca"
        },
        kingdomZones = {
            -- from left to right and then top to bottom
            "3d368b",
            "21f484",
            "302acc",
            "0e683e",
            "1b15fb",
            "e5281c",
            "378a2a",
            "395cf8",
            "ec5547",
            "756903"
        },
        eventMats = {
            -- from left to right
            "bd3de5",
            "7dea91",
            "0deb11",
            "b0a32d"
        },
        eventZones = {
            -- from left to right
            "571c8c",
            "817e2f",
            "7657a3",
            "f39ca2"
        },
        -- all other mats used inside the supply
        otherMats = {
            ["Bane Mat"]         = {"df4a68", "9c5a7e"},
            ["Trash Mat"]        = "b282fd",
            ["Black Market Mat"] = {"b60e21", "031a4d", "668dbc"},
            ["Trade Route Mat"]  = "b853e8"
        }
    },
    -- all cards on white non-supply mats plus the zombies pile and the mats themselves
    nonSupply = {
        piles = {
            ["Madman"]          = "aad690",
            ["Mercenary"]       = "268698",
            ["Spoils"]          = "a28f37",
            ["Will-o'-Wisp"]    = "6b95ed",
            ["Imp"]             = "f03f23",
            ["Ghost"]           = "b1c514",
            ["Treasure Hunter"] = "fe074f",
            ["Warrior"]         = "28295b",
            ["Hero"]            = "6d6378",
            ["Champion"]        = "8a1c6a",
            ["Wish"]            = "c1d9e5",
            ["Bat"]             = "dc4a0b",
            ["Soldier"]         = "59ed88",
            ["Fugitive"]        = "3820bb",
            ["Disciple"]        = "a0f20e",
            ["Teacher"]         = "7fe8ec",
            ["Prizes"]          = "9f140e",
            ["Horse"]           = "12ec27",
            ["Zombies"]         = "5b95aa"
        },
        mats = {
            ["Madman"]          = "a3a3f8",
            ["Mercenary"]       = "264d5e",
            ["Spoils"]          = "dedd90",
            ["Will-o'-Wisp"]    = "be1e86",
            ["Imp"]             = "bef3f2",
            ["Ghost"]           = "0739ed",
            ["Treasure Hunter"] = "3f3675",
            ["Warrior"]         = "58b157",
            ["Hero"]            = "7ff05c",
            ["Champion"]        = "ac9988",
            ["Wish"]            = "76feaf",
            ["Bat"]             = "3734fb",
            ["Soldier"]         = "fb8b29",
            ["Fugitive"]        = "dd9c06",
            ["Disciple"]        = "fb3a5a",
            ["Teacher"]         = "ddd6fe",
            ["Prizes"]          = "d5887b",
            ["Horse"]           = "b470be"
        },
        zones = {
            ["Madman"]          = "89dca4",
            ["Mercenary"]       = "9f282c",
            ["Spoils"]          = "c4d056",
            ["Will-o'-Wisp"]    = "8f8ba1",
            ["Imp"]             = "c5c39f",
            ["Ghost"]           = "eb4c31",
            ["Treasure Hunter"] = "07341c",
            ["Warrior"]         = "ce4c41",
            ["Hero"]            = "d1e459",
            ["Champion"]        = "1ee432",
            ["Wish"]            = "0fe09c",
            ["Bat"]             = "141a3f",
            ["Soldier"]         = "fb602d",
            ["Fugitive"]        = "1f6b93",
            ["Disciple"]        = "573b4a",
            ["Teacher"]         = "af118c",
            ["Prizes"]          = "29daf7",
            ["Horse"]           = "82ca0b"
        }
    },
    -- all piles that make up the expansions as well as event-likes and shelters / heirlooms
    expansions = {
        piles = {
            ["Dominion"]             = "33d038",
            ["Intrigue"]             = "a2a4c8",
            ["Seaside"]              = "16e3aa",
            ["Alchemy"]              = "f45629",
            ["Prosperity"]           = "a8fee3",
            ["Cornucopia"]           = "a70b3a",
            ["Hinterlands"]          = "223a08",
            ["Dark Ages"]            = "7e0f43",
            ["Guilds"]               = "3c269b",
            ["Adventures"]           = "7de6ab",
            ["Empires"]              = "8c2b6f",
            ["Nocturne"]             = "53ccb6",
            ["Renaissance"]          = "042073",
            ["Menagerie"]            = "056dde",
            ["Promos"]               = "d62401",
            ["Cut Dominion Cards"]   = "98d602",
            ["Cut Intrigue Cards"]   = "192245",
            ["Adventures Events"]    = "21a279",
            ["Empires Events"]       = "54927b",
            ["Empires Landmarks"]    = "843ff5",
            ["Renaissance Projects"] = "b79f00",
            ["Menagerie Events"]     = "018790",
            ["Menagerie Ways"]       = "ef8beb",
            ["Summon"]               = "dd9be5",
            ["Shelters"]             = "915142",
            ["Heirlooms"]            = "bfcd97"
        },
        mats = {
            ["Dominion"]             = "b84143",
            ["Intrigue"]             = "b3cd66",
            ["Seaside"]              = "719f72",
            ["Alchemy"]              = "b35d65",
            ["Prosperity"]           = "915c19",
            ["Cornucopia"]           = "11eac7",
            ["Hinterlands"]          = "73a2f9",
            ["Dark Ages"]            = "868360",
            ["Guilds"]               = "39fb89",
            ["Adventures"]           = "ce734e",
            ["Empires"]              = "b14a18",
            ["Nocturne"]             = "578a67",
            ["Renaissance"]          = "7e1446",
            ["Menagerie"]            = "479036",
            ["Promos"]               = "262ad2",
            ["Cut Dominion Cards"]   = "2b0860",
            ["Cut Intrigue Cards"]   = "efa21e",
            ["Adventures Events"]    = "e2b84b",
            ["Empires Events"]       = "64cada",
            ["Empires Landmarks"]    = "53cc98",
            ["Renaissance Projects"] = "1d52e4",
            ["Menagerie Events"]     = "2564e9",
            ["Menagerie Ways"]       = "e8e6a7",
            ["Summon"]               = "8d7200",
            ["Shelters"]             = "e5fb3b",
            ["Heirlooms"]            = "88ffee"
        }
    },
    -- all special piles that are used to replace a setup card
    replacementPiles = {
        piles = {
            ["Knights"]                     = "2c40f7",
            ["Encampment / Plunder"]        = "80ffa8",
            ["Patrician / Emporium"]        = "2261c6",
            ["Settlers / Bustling Village"] = "4dc1ff",
            ["Castles"]                     = "7b9cc0",
            ["Catapult / Rocks"]            = "eb45b9",
            ["Gladiator / Fortune"]         = "65a365",
            ["Sauna / Avanto"]              = "3c7eb3"
        },
        mats = {
            ["Knights"]                     = "1c7b6c",
            ["Encampment / Plunder"]        = "783b87",
            ["Patrician / Emporium"]        = "26968f",
            ["Settlers / Bustling Village"] = "8096b3",
            ["Castles"]                     = "6f8922",
            ["Catapult / Rocks"]            = "59ebc4",
            ["Gladiator / Fortune"]         = "ecab0e",
            ["Sauna / Avanto"]              = "5e88e2"
        }
    },
    -- all other materials used to play the game (boons, hexes, states, embargo tokens, etc)
    other = {
        piles = {
            ["Boons"] = "b813c4",
            ["Hexes"] = "0dc1b8",
            ["Artifacts"] = "225220",
            ["States"] = "ca6964",
            ["Embargo Tokens"] = "7c2165"       -- added in piles for simplicity
        },
        mats = {
            ["Boons"] = { "859ea1", "486bcb" }, -- deck mat then discard mat
            ["Hexes"] = { "ad947d", "b37648" },
            ["Artifacts"] = "9c974f",
            ["States"] = "5e43cc"
        }
    },
    ["Randomizer Deck Mat"] = "e9084b",
    ["Randomizer Deck Zone"] = "95a9d3",
    ["Randomizer Discard Mat"] = "148c0f",
    ["Randomizer Discard Zone"] = "268abf",
    ["Play Area Mat"]  = "008a72",
    ["Play Area Zone"] = "87f6d0",
    -- the zone used to display global buttons
    ["Button Zone"]    = "6ca3bf"
}

-- on load is set to a copy of guids but the values are the result of using getObjectFromGUID
objects = {
    -- ["Template Group"] = {
    --     ["Identifier"] = getObjectFromGUID("123456")
    -- }
}

-- list of player colors in turn order
players = {
    "Yellow",
    "Blue",
    "Red",
    "White",
    "Green",
    "Pink"
}

-- custom color values for player colors used to color the play area, etc
customPlayerColors = {
    White  = {195/255, 195/255, 195/255},
    Red    = {204/255,  47/255,  47/255},
    Green  = { 55/255, 174/255,  55/255},
    Blue   = { 56/255,  56/255, 188/255},
    Pink   = {235/255, 100/255, 235/255},
    Yellow = {202/255, 202/255,  56/255}
}

-- list of functions that return a function customized for a button
buttonFunctionPrototypes = {                                                                                            -- NEEDS TO BE REWORKED
    shuffle = function(color)
        return function(obj, player_clicker_color, alt_click)
            if player_clicker_color == color then
                shuffleDiscard(color)
            else
                printToColor("You can't click someone else's shuffle button.", player_clicker_color)
            end
        end
    end,
    validateAdmin = function(func)
        return function(obj, player_clicker_color, alt_click)
            if Player[player_clicker_color].admin == false then
                printToColor("You cannot use this button because you are not an admin!", player_clicker_color)
                return
            end
            func()
        end
    end,
    gain = function()
        return function(obj, player_clicker_color, alt_click)
            local deck = findDeck(obj)
            local position = objects.players[player_clicker_color].zones["Discard"].getPosition()
            if deck then
                safeTakeObject(deck, {
                    position = position,
                    rotation = vector(0, 180, 0),
                    index = (deck.getQuantity() > 0 and deck.getQuantity() - 1) or 0
                })
            end
        end
    end
}

-- list of functions which return a table of parameters for a specific type of button
buttonParamsPrototypes = {                                                                                              -- NEEDS TO BE REWORKED
    shuffle = function(color)
        local shuffleButtonPositions = {
            ["Pink"]   = vector(-45.5, -3.9, 33.5),
            ["Green"]  = vector(-27.4, -3.9, 33.5),
            ["White"]  = vector(-9.3, -3.9, 33.5),
            ["Red"]    = vector(8.9, -3.9, 33.5),
            ["Blue"]   = vector(27, -3.9, 33.5),
            ["Yellow"] = vector(45.2, -3.9, 33.5),
        }
        return {
            click_function = "shuffle"..color.."Button",
            label          = "Shuffle",
            position       = shuffleButtonPositions[color],
            width          = 1100,
            height         = 600,
            font_size      = 300
        }
    end,
    dealRandomizer = function()
        return {
            click_function = "dealRandomizerButton",
            label          = "Deal",
            position       = {0, -3.9, 11},
            width          = 2000,
            height         = 800,
            font_size      = 500,
            tooltip        = "Put the randomizer cards you want to use into the above deck mat and hit deal."
        }
    end,
    setup = function()
        return {
            click_function = "setupButton",
            label          = "Complete Setup",
            position       = {0, -3.9, 15},
            width          = 4000,
            height         = 1200,
            font_size      = 500
        }
    end,
    gain = function()
        return {
            click_function = "gain",
            label          = "Gain",
            color          = color(1, 1, 1, 0.1),
            hover_color    = color(1, 1, 1, 1),
            position       = vector(0, 0, 0.25),
            rotation       = vector(0, 180, 0),
            scale          = vector(0.5, 0.5, 0.33),
            width          = 1500,
            height         = 1000,
            font_size      = 600
        }
    end,
    endGame = function()
        return {
            click_function = "endGameButton",
            label     = "End Game",
            position  = {0, -3.9, -24},
            width     = 2000,
            height    = 1000,
            font_size = 340,
            tooltip   = "Ends the game causing scores to be calculated and all cards to be gathered into decks."
        }
    end
}

-- the table of values that should be saved for when the table is reloaded
save = {}

-- default save data
defaultSave = {
    debug = true,
    buttons = {
        [guids["Button Zone"]] = {
            ["Shuffle Pink"] = {
                index = 0,
                params = buttonParamsPrototypes.shuffle("Pink")
            },
            ["Shuffle Green"] = {
                index = 0,
                params = buttonParamsPrototypes.shuffle("Green")
            },
            ["Shuffle White"] = {
                index = 0,
                params = buttonParamsPrototypes.shuffle("White")
            },
            ["Shuffle Red"] = {
                index = 0,
                params = buttonParamsPrototypes.shuffle("Red")
            },
            ["Shuffle Blue"] = {
                index = 0,
                params = buttonParamsPrototypes.shuffle("Blue")
            },
            ["Shuffle Yellow"] = {
                index = 0,
                params = buttonParamsPrototypes.shuffle("Yellow")
            },
            ["Deal Randomizer"] = {
                index = 0,
                params = buttonParamsPrototypes.dealRandomizer()
            },
            ["Complete Setup"] = {
                index = 0,
                params = buttonParamsPrototypes.setup()
            }
        }
    },
    turnsEnabled = false
}

-- a list of every tts card object in the game translated into dominion card including event type cards as well as fan cards
-- ordered by expansion/group and then by cost and then by alphabetical (except for the basic cards)
-- order follows the order on the dominion wiki
cards = {                                                                                                               -- NEEDS TO BE REWORKED
    ["_Template"] = {
        set = "Dominion",   -- the expansion this card first appears in
        -- how this card is used to play dominion
        -- Card is something that goes in your deck
        -- Kingdom are cards that can be used to setup the kingdom and are random each game
        -- Basic and Non-Supply tells you where it is found
        -- Starter is a card that can start in your opening deck
        -- Sideways are cards that show up in the supply turned sideways
        -- Extra is anything like artifacts, states, boons, etc which are outside the game
        class = {"Card", "Kingdom"},
        cost = {Money = 3, Debt = 2},  -- Money, Debt, Potion
        type = {"Action", "Treasure"},  -- Action, Treasure, Victory, etc
        vp = 0,     -- how many vp this card is worth (uses score funciton instead if its present)
        supplyCount = 12,   -- how many copies should be spawned in the supply pile (defaults to 10 if none is provided)
        -- returns the score this card or landmark gives
        -- deckLists - a table of every player's deck list (needed for Keep or similar effects)
        -- playerColor - the player that is scoring this card
        -- object - the card or deck object containing it that is being scored
        nonSupply = {"foo", "bar"}, -- what non-Supply cards this card needs (can also be a single string instead of a table)
        matsAndTokens = {"foo", "bar"}, -- what mats or tokens this card needs (can also be a single string instead of a table)
        extras = {["Boons"] = true, ["Artifacts"] = "Horn"}, -- what extra materials this card needs
        replacement = "Knights",   -- the name of the pile that replaces this randomizer card (Knights, Castles, etc)
        sheet = { name = "", position = 0},             -- info about the spritesheet used and the position on the sheet
        getDependencies = function(board, boardSettings) end,   -- add any additional dependencies to board (black market, etc)
        setup = function(board, zone) end, -- if this card needs any special setup
        getSupplyCount = function(board) end,    -- used to calculate the supply count (this is used instead of supplyCount if it is present)
        score = function(deckLists, playerColor, object) end   -- used to score this card
    },
    -- Official Cards
    -- BASIC CARDS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ["Copper"]   = { set = "Dominion", class = {"Card", "Basic", "Starter"}, cost = {Money = 0},  type = {"Treasure"},         sheet = {name = "Basics", position = 5} },
    ["Silver"]   = { set = "Dominion", class = {"Card", "Basic"},            cost = {Money = 3},  type = {"Treasure"},         sheet = {name = "Basics", position = 6} },
    ["Gold"]     = { set = "Dominion", class = {"Card", "Basic"},            cost = {Money = 6},  type = {"Treasure"},         sheet = {name = "Basics", position = 7} },
    ["Estate"]   = { set = "Dominion", class = {"Card", "Basic", "Starter"}, cost = {Money = 2},  type = {"Victory"}, vp = 1,  sheet = {name = "Basics", position = 1} },
    ["Duchy"]    = { set = "Dominion", class = {"Card", "Basic"},            cost = {Money = 5},  type = {"Victory"}, vp = 3,  sheet = {name = "Basics", position = 2} },
    ["Province"] = { set = "Dominion", class = {"Card", "Basic"},            cost = {Money = 8},  type = {"Victory"}, vp = 6,  sheet = {name = "Basics", position = 3} },
    ["Curse"]    = { set = "Dominion", class = {"Card", "Basic"},            cost = {Money = 0},  type = {"Curse"},   vp = -1, sheet = {name = "Basics", position = 0} },
    -- DOMINION //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ["Cellar"]     = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},             sheet = {name = "Dominion", position = 0 } },
    ["Chapel"]     = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},             sheet = {name = "Dominion", position = 1} },
    ["Moat"]       = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action", "Reaction"}, sheet = {name = "Dominion", position = 2} },
    ["Harbinger"]  = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},             sheet = {name = "Dominion", position = 3} },
    ["Merchant"]   = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},             sheet = {name = "Dominion", position = 6} },
    ["Vassal"]     = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},             sheet = {name = "Dominion", position = 7} },
    ["Village"]    = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},             sheet = {name = "Dominion", position = 4} },
    ["Workshop"]   = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},             sheet = {name = "Dominion", position = 5} },
    ["Bureaucrat"] = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"},   sheet = {name = "Dominion", position = 13} },
    ["Gardens"]    = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Victory"},            sheet = {name = "Dominion", position = 15},
        score = function(deckLists, playerColor)
            return math.floor(getCount(deckLists[playerColor]) / 10)
        end
    },
    ["Militia"]      = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"}, sheet = {name = "Dominion", position = 14} },
    ["Moneylender"]  = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},           sheet = {name = "Dominion", position = 10} },
    ["Poacher"]      = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},           sheet = {name = "Dominion", position = 11} },
    ["Remodel"]      = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},           sheet = {name = "Dominion", position = 9} },
    ["Smithy"]       = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},           sheet = {name = "Dominion", position = 8} },
    ["Throne Room"]  = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},           sheet = {name = "Dominion", position = 12} },
    ["Bandit"]       = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"}, sheet = {name = "Dominion", position = 24} },
    ["Council Room"] = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},           sheet = {name = "Dominion", position = 16} },
    ["Festival"]     = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},           sheet = {name = "Dominion", position = 21} },
    ["Laboratory"]   = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},           sheet = {name = "Dominion", position = 22} },
    ["Library"]      = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},           sheet = {name = "Dominion", position = 20} },
    ["Market"]       = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},           sheet = {name = "Dominion", position = 17} },
    ["Mine"]         = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},           sheet = {name = "Dominion", position = 18} },
    ["Sentry"]       = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},           sheet = {name = "Dominion", position = 19} },
    ["Witch"]        = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"}, sheet = {name = "Dominion", position = 23} },
    ["Artisan"]      = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 6}, type = {"Action"},           sheet = {name = "Dominion", position = 25} },
    -- Cut Cards
    ["Chancellor"]   = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Woodcutter"]   = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Feast"]        = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Spy"]          = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"}, sheet = {name = "", position = "00"} },
    ["Thief"]        = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"}, sheet = {name = "", position = "00"} },
    ["Adventurer"]   = { set = "Dominion", class = {"Card", "Kingdom"}, cost = {Money = 6}, type = {"Action"},           sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INTRIGUE
    ["Courtyard"]      = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Lurker"]         = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Pawn"]           = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Masquerade"]     = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Shanty Town"]    = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Steward"]        = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Swindler"]       = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Wishing Well"]   = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Baron"]          = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Bridge"]         = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Conspirator"]    = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Diplomat"]       = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Reaction"},          sheet = {name = "", position = "00"} },
    ["Ironworks"]      = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Mill"]           = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Victory"},   vp = 1, sheet = {name = "", position = "00"} },
    ["Mining Village"] = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Secret Passage"] = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Courtier"]       = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Duke"]           = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Victory"},                     sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return deckLists[playerColor]["Duchy"] or 0
        end
    },
    ["Minion"]         = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Patrol"]         = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Replace"]        = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Torturer"]       = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Trading Post"]   = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Upgrade"]        = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Harem"]          = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 6}, type = {"Treasure", "Victory"}, vp = 2, sheet = {name = "", position = "00"} },
    ["Nobles"]         = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 6}, type = {"Action", "Victory"},   vp = 2, sheet = {name = "", position = "00"} },
    -- Cut Cards
    ["Secret Chamber"] = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action", "Reaction"},          sheet = {name = "", position = "00"} },
    ["Great Hall"]     = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action", "Victory"},   vp = 1, sheet = {name = "", position = "00"} },
    ["Coppersmith"]    = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Scout"]          = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Saboteur"]       = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Tribute"]        = { set = "Intrigue", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// SEASIDE
    ["Embargo"]         = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},            matsAndTokens = {"Embargo Tokens"},     sheet = {name = "", position = "00"} },
    ["Haven"]           = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    ["Lighthouse"]      = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    ["Native Village"]  = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},            matsAndTokens = {"Native Village Mat"}, sheet = {name = "", position = "00"} },
    ["Pearl Diver"]     = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Ambassador"]      = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action", "Attack"},                                          sheet = {name = "", position = "00"} },
    ["Fishing Village"] = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    ["Lookout"]         = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Smugglers"]       = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Warehouse"]       = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Caravan"]         = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    ["Cutpurse"]        = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"},                                          sheet = {name = "", position = "00"} },
    ["Island"]          = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Victory"}, matsAndTokens = {"Island Mat"}, vp = 2, sheet = {name = "", position = "00"} },
    ["Navigator"]       = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Pirate Ship"]     = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"},  matsAndTokens = {"Pirate Ship Coins"},  sheet = {name = "", position = "00"} },
    ["Salvager"]        = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Sea Hag"]         = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"},                                          sheet = {name = "", position = "00"} },
    ["Treasure Map"]    = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Bazaar"]          = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Explorer"]        = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Ghost Ship"]      = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},                                          sheet = {name = "", position = "00"} },
    ["Merchant Ship"]   = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    ["Outpost"]         = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    ["Tactician"]       = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    ["Treasury"]        = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                                    sheet = {name = "", position = "00"} },
    ["Wharf"]           = { set = "Seaside", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Duration"},                                        sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// ALCHEMY
    ["Transmute"]           = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Potion = 1},            type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Vineyard"]            = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Potion = 1},            type = {"Victory"},          sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return math.floor(sumTable(table.filter(deckLists[playerColor], function(_, k) return cards[k] and cards[k].type and hasValue(cards[k].type, "Action") end)) / 3)
        end
    },
    ["Herbalist"]           = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 2},             type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Apothecary"]          = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 2, Potion = 1}, type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Scrying Pool"]        = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 2, Potion = 1}, type = {"Action", "Attack"}, sheet = {name = "", position = "00"} },
    ["University"]          = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 2, Potion = 1}, type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Alchemist"]           = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 3, Potion = 1}, type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Familiar"]            = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 3, Potion = 1}, type = {"Action", "Attack"}, sheet = {name = "", position = "00"} },
    ["Golem"]               = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 4, Potion = 1}, type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Apprentice"]          = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 5},             type = {"Action"},           sheet = {name = "", position = "00"} },
    ["Possession"]          = { set = "Alchemy", class = {"Card", "Kingdom"}, cost = {Money = 6, Potion = 1}, type = {"Action"},           sheet = {name = "", position = "00"} },
    -- Basic Cards
    ["Potion"]              = { set = "Alchemy", class = {"Card", "Basic"},   cost = {Money = 4},             type = {"Treasure"},         sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PROSPERITY
    ["Loan"]             = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 3},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Trade Route"]      = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 3},  type = {"Action"},           matsAndTokens = {"Trade Route Mat"}, sheet = {name = "", position = "00"} },
    ["Watchtower"]       = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 3},  type = {"Action", "Reaction"},                                    sheet = {name = "", position = "00"} },
    ["Bishop"]           = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 4},  type = {"Action"},           matsAndTokens = {"Victory Points"},  sheet = {name = "", position = "00"} },
    ["Monument"]         = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 4},  type = {"Action"},           matsAndTokens = {"Victory Points"},  sheet = {name = "", position = "00"} },
    ["Quarry"]           = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 4},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Talisman"]         = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 4},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Worker's Village"] = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 4},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["City"]             = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["Contraband"]       = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Counting House"]   = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["Mint"]             = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["Mountebank"]       = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Action", "Attack"},                                      sheet = {name = "", position = "00"} },
    ["Rabble"]           = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Action", "Attack"},                                      sheet = {name = "", position = "00"} },
    ["Royal Seal"]       = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Vault"]            = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["Venture"]          = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 5},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Goons"]            = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 6},  type = {"Action", "Attack"}, matsAndTokens = {"Victory Points"},  sheet = {name = "", position = "00"} },
    ["Grand Market"]     = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 6},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["Hoard"]            = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 6},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Bank"]             = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 7},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Expand"]           = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 7},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["Forge"]            = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 7},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["King's Court"]     = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 7},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    ["Peddler"]          = { set = "Prosperity", class = {"Card", "Kingdom"}, cost = {Money = 8},  type = {"Action"},                                                sheet = {name = "", position = "00"} },
    -- Basic Cards
    ["Platinum"]         = { set = "Prosperity", class = {"Card", "Basic"},   cost = {Money = 9},  type = {"Treasure"},                                              sheet = {name = "", position = "00"} },
    ["Colony"]           = { set = "Prosperity", class = {"Card", "Basic"},   cost = {Money = 11}, type = {"Victory"}, vp = 10,                                      sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CORNUCOPIA
    ["Hamlet"]          = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 2}, type = {"Action"},                                   sheet = {name = "", position = "00"} },
    ["Fortune Teller"]  = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Action", "Attack"},                         sheet = {name = "", position = "00"} },
    ["Menagerie"]       = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Action"},                                   sheet = {name = "", position = "00"} },
    ["Farming Village"] = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                   sheet = {name = "", position = "00"} },
    ["Horse Traders"]   = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action", "Reaction"},                       sheet = {name = "", position = "00"} },
    ["Remake"]          = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                   sheet = {name = "", position = "00"} },
    ["Tournament"]      = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},           nonSupply = {"Prizes"}, sheet = {name = "", position = "00"} },
    ["Young Witch"]     = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action", "Attack"},                         sheet = {name = "", position = "00"},
        getDependencies = function(board, boardSettings)
            local zone = getObjectFromGUID(kingdomPiles["Bane"] and kingdomPiles["Bane"].guids and kingdomPiles["Bane"].guids["Zone"])
            if not zone then
                printToAll("ERROR: Young Witch cannot setup. No zone was found for the Bane pile.", Color.Red)
                board.isDirty = true
                return
            else
                local cardName = boardSettings:ReadSlot(zone)
                if boardSettings.otherSettings["Bane"] then
                    if cardName then
                        printToAll("ERROR: Young Witch cannot setup. There cannot be a card in the Bane pile if using settings.", Color.Red)
                        board.isDirty = true
                        return
                    end
                    board:AddKingdomPile(boardSettings.otherSettings["Bane"], "Bane")
                elseif cardName then
                    board:AddKingdomPile(cardName, "Bane")
                else
                    -- draw a card from the randomizer
                    local card = dealRandomizerCard()
                    if not card then
                        printToAll("ERROR: Young Witch cannot setup. No Randomizer card was able to be drawn for the Bane pile.", Color.Red)
                        board.isDirty = true
                        return
                    else
                        local pos = zone.getPosition()
                        pos.y = 1
                        card.setPositionSmooth(pos, false, false)
                        card.setRotation(vector(0, 180, 0))
                        board:AddKingdomPile(card.getName(), "Bane")

                        function youngWitchCoroutine()
                            board.coroutinesRunning = board.coroutinesRunning + 1
                            for i = 1, 60 do
                                coroutine.yield(0)
                            end
                            board.coroutinesRunning = board.coroutinesRunning - 1

                            return 1
                        end

                        startLuaCoroutine(self, "youngWitchCoroutine")
                    end
                end
            end
        end
    },
    ["Harvest"]         = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                   sheet = {name = "", position = "00"} },
    ["Horn of Plenty"]  = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Treasure"},                                 sheet = {name = "", position = "00"} },
    ["Hunting Party"]   = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                   sheet = {name = "", position = "00"} },
    ["Jester"]          = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack"},                         sheet = {name = "", position = "00"} },
    ["Fairgrounds"]     = { set = "Cornucopia", class = {"Card", "Kingdom"},    cost = {Money = 6}, type = {"Victory"},                                  sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return math.floor(getCount(deckLists[playerColor]) / 5) * 2
        end
    },
    -- Prizes
    ["Bag of Gold"]     = { set = "Cornucopia", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action", "Prize"},                          sheet = {name = "", position = "00"} },
    ["Diadem"]          = { set = "Cornucopia", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Treasure", "Prize"},                        sheet = {name = "", position = "00"} },
    ["Followers"]       = { set = "Cornucopia", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action", "Attack", "Prize"},                sheet = {name = "", position = "00"} },
    ["Princess"]        = { set = "Cornucopia", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action", "Prize"},                          sheet = {name = "", position = "00"} },
    ["Trusty Steed"]    = { set = "Cornucopia", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action", "Prize"},                          sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// HINTERLANDS
    ["Crossroads"]         = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Duchess"]            = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Fool's Gold"]        = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Treasure", "Reaction"},        sheet = {name = "", position = "00"} },
    ["Develop"]            = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Oasis"]              = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Oracle"]             = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Scheme"]             = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Tunnel"]             = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Victory", "Reaction"}, vp = 2, sheet = {name = "", position = "00"} },
    ["Jack of All Trades"] = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Noble Brigand"]      = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Nomad Camp"]         = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Silk Road"]          = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Victory"},                     sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return math.floor(sumTable(table.filter(deckLists[playerColor], function(_, k) return cards[k] and cards[k].type and hasValue(cards[k].type, "Victory") end)) / 4)
        end
    },
    ["Spice Merchant"]     = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Trader"]             = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Reaction"},          sheet = {name = "", position = "00"} },
    ["Cache"]              = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Treasure"},                    sheet = {name = "", position = "00"} },
    ["Cartographer"]       = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Embassy"]            = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Haggler"]            = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Highway"]            = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Ill-Gotten Gains"]   = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Treasure"},                    sheet = {name = "", position = "00"} },
    ["Inn"]                = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Mandarin"]           = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Margrave"]           = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},            sheet = {name = "", position = "00"} },
    ["Stables"]            = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Border Village"]     = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 6}, type = {"Action"},                      sheet = {name = "", position = "00"} },
    ["Farmland"]           = { set = "Hinterlands", class = {"Card", "Kingdom"}, cost = {Money = 6}, type = {"Victory"},             vp = 2, sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// DARK AGES
    ["Poor House"]    = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 1}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Beggar"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 2}, type = {"Action", "Reaction"},                                                 sheet = {name = "", position = "00"} },
    ["Squire"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 2}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Vagrant"]       = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 2}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Forager"]       = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 3}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Hermit"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 3}, type = {"Action"},                     nonSupply = {"Madman Pile"},            sheet = {name = "", position = "00"} },
    ["Market Square"] = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 3}, type = {"Action", "Reaction"},                                                 sheet = {name = "", position = "00"} },
    ["Sage"]          = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 3}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Storeroom"]     = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 3}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Urchin"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 3}, type = {"Action", "Attack"},           nonSupply = {"Mercenary Pile"},         sheet = {name = "", position = "00"} },
    ["Armory"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 4}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Death Cart"]    = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 4}, type = {"Action", "Looter"},                                                   sheet = {name = "", position = "00"} },
    ["Feodum"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},         cost = {Money = 4}, type = {"Victory"},                                                            sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return (deckLists[playerColor]["Silver"] and math.floor(deckLists[playerColor]["Silver"] / 3)) or 0
        end
    },
    ["Fortress"]           = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Ironmonger"]         = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Marauder"]           = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action", "Attack", "Looter"}, nonSupply = {"Spoils Pile"},            sheet = {name = "", position = "00"} },
    ["Procession"]         = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Rats"]               = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"}, supplyCount = 20,                                           sheet = {name = "", position = "00"} },
    ["Scavenger"]          = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Wandering Minstrel"] = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Band of Misfits"]    = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Bandit Camp"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                     nonSupply = {"Spoils Pile"},            sheet = {name = "", position = "00"} },
    ["Catacombs"]          = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Count"]              = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Counterfeit"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Treasure"},                                                           sheet = {name = "", position = "00"} },
    ["Cultist"]            = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Looter"},                                         sheet = {name = "", position = "00"} },
    ["Graverobber"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Junk Dealer"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Knights"]            = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"}, replacement = "Knights",                sheet = {name = "", position = "00"} }, -- the Knights setup card
    ["Mystic"]             = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Pillage"]            = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack"},           nonSupply = {"Spoils Pile"},            sheet = {name = "", position = "00"} },
    ["Rebuild"]            = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Rogue"]              = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack"},                                                   sheet = {name = "", position = "00"} },
    ["Altar"]              = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 6}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Hunting Grounds"]    = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 6}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    -- Knights
    ["Dame Anna"]          = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Dame Josephine"]     = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight", "Victory"}, vp = 2,                      sheet = {name = "", position = "00"} },
    ["Dame Molly"]         = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Dame Natalie"]       = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Dame Sylvia"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Sir Bailey"]         = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Sir Destry"]         = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Sir Martin"]         = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Sir Michael"]        = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    ["Sir Vander"]         = { set = "Dark Ages", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Knight"},                                         sheet = {name = "", position = "00"} },
    -- Ruins
    ["Abandoned Mine"]     = { set = "Dark Ages", class = {"Card", "Basic"},      cost = {Money = 0}, type = {"Action", "Ruins"},                                                    sheet = {name = "", position = "00"} },
    ["Ruined Library"]     = { set = "Dark Ages", class = {"Card", "Basic"},      cost = {Money = 0}, type = {"Action", "Ruins"},                                                    sheet = {name = "", position = "00"} },
    ["Ruined Market"]      = { set = "Dark Ages", class = {"Card", "Basic"},      cost = {Money = 0}, type = {"Action", "Ruins"},                                                    sheet = {name = "", position = "00"} },
    ["Ruined Village"]     = { set = "Dark Ages", class = {"Card", "Basic"},      cost = {Money = 0}, type = {"Action", "Ruins"},                                                    sheet = {name = "", position = "00"} },
    ["Survivors"]          = { set = "Dark Ages", class = {"Card", "Basic"},      cost = {Money = 0}, type = {"Action", "Ruins"},                                                    sheet = {name = "", position = "00"} },
    -- Shelters
    ["Hovel"]              = { set = "Dark Ages", class = {"Card", "Starter"},    cost = {Money = 1}, type = {"Reaction", "Shelter"},                                                sheet = {name = "", position = "00"} },
    ["Necropolis"]         = { set = "Dark Ages", class = {"Card", "Starter"},    cost = {Money = 1}, type = {"Action", "Shelter"},                                                  sheet = {name = "", position = "00"} },
    ["Overgrown Estate"]   = { set = "Dark Ages", class = {"Card", "Starter"},    cost = {Money = 1}, type = {"Victory", "Shelter"},                    vp = 0,                      sheet = {name = "", position = "00"} },
    -- Non-supply
    ["Madman"]             = { set = "Dark Ages", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action"},                                                             sheet = {name = "", position = "00"} },
    ["Mercenary"]          = { set = "Dark Ages", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action", "Attack"},                                                   sheet = {name = "", position = "00"} },
    ["Spoils"]             = { set = "Dark Ages", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Treasure"},                                                           sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// GUILDS
    ["Candlestick Maker"] = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"}, matsAndTokens = {"Coffers"}, sheet = {name = "", position = "00"} },
    ["Stonemason"]        = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                              sheet = {name = "", position = "00"} },
    ["Doctor"]            = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                              sheet = {name = "", position = "00"} },
    ["Masterpiece"]       = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Treasure"},                            sheet = {name = "", position = "00"} },
    ["Advisor"]           = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                              sheet = {name = "", position = "00"} },
    ["Plaza"]             = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"}, matsAndTokens = {"Coffers"}, sheet = {name = "", position = "00"} },
    ["Taxman"]            = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Attack"},                    sheet = {name = "", position = "00"} },
    ["Herald"]            = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                              sheet = {name = "", position = "00"} },
    ["Baker"]             = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"}, matsAndTokens = {"Coffers"}, sheet = {name = "", position = "00"} },
    ["Butcher"]           = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"}, matsAndTokens = {"Coffers"}, sheet = {name = "", position = "00"} },
    ["Journeyman"]        = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                              sheet = {name = "", position = "00"} },
    ["Merchant Guild"]    = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"}, matsAndTokens = {"Coffers"}, sheet = {name = "", position = "00"} },
    ["Soothsayer"]        = { set = "Guilds", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},                    sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// ADVENTURES
    ["Coin of the Realm"] = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 2}, type = {"Treasure", "Reserve"},                                                                                                  sheet = {name = "", position = "00"} },
    ["Page"]              = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 2}, type = {"Action", "Traveller"},          nonSupply = {"Treasure Hunter Pile"},                                                   sheet = {name = "", position = "00"} },
    ["Peasant"]           = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 2}, type = {"Action", "Traveller"},          nonSupply = {"Soldier Pile"},                                                           sheet = {name = "", position = "00"} },
    ["Ratcatcher"]        = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 2}, type = {"Action", "Reserve"},                                                                                                    sheet = {name = "", position = "00"} },
    ["Raze"]              = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 2}, type = {"Action"},                                                                                                               sheet = {name = "", position = "00"} },
    ["Amulet"]            = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 3}, type = {"Action", "Duration"},                                                                                                   sheet = {name = "", position = "00"} },
    ["Caravan Guard"]     = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 3}, type = {"Action", "Duration", "Reaction"},                                                                                       sheet = {name = "", position = "00"} },
    ["Dungeon"]           = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 3}, type = {"Action", "Duration"},                                                                                                   sheet = {name = "", position = "00"} },
    ["Gear"]              = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 3}, type = {"Action", "Duration"},                                                                                                   sheet = {name = "", position = "00"} },
    ["Guide"]             = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 3}, type = {"Action", "Reserve"},                                                                                                    sheet = {name = "", position = "00"} },
    ["Duplicate"]         = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 4}, type = {"Action", "Reserve"},                                                                                                    sheet = {name = "", position = "00"} },
    ["Magpie"]            = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 4}, type = {"Action"},                                                                                                               sheet = {name = "", position = "00"} },
    ["Messenger"]         = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 4}, type = {"Action"},                                                                                                               sheet = {name = "", position = "00"} },
    ["Miser"]             = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 4}, type = {"Action"},                       matsAndTokens = {"Tavern Mat"},                                                         sheet = {name = "", position = "00"} },
    ["Port"]              = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 4}, type = {"Action"},                       supplyCount = 12,                                                                       sheet = {name = "", position = "00"} },
    ["Ranger"]            = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 4}, type = {"Action"},                       matsAndTokens = {"Journey Token"},                                                      sheet = {name = "", position = "00"} },
    ["Transmogrify"]      = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 4}, type = {"Action", "Reserve"},                                                                                                    sheet = {name = "", position = "00"} },
    ["Artificer"]         = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action"},                                                                                                               sheet = {name = "", position = "00"} },
    ["Bridge Troll"]      = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action", "Attack", "Duration"}, matsAndTokens = {"-1 Coin Token"},                                                      sheet = {name = "", position = "00"} },
    ["Distant Lands"]     = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action", "Reserve", "Victory"},                                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            if hasValue(object.getZones(), objects.players[playerColor].zones["Tavern Mat"]) then return 4 end
            return 0
        end
    },
    ["Giant"]             = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action", "Attack"},             matsAndTokens = {"Journey Token"},                                                      sheet = {name = "", position = "00"} },
    ["Haunted Woods"]     = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action", "Attack", "Duration"},                                                                                         sheet = {name = "", position = "00"} },
    ["Lost City"]         = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action"},                                                                                                               sheet = {name = "", position = "00"} },
    ["Relic"]             = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Treasure", "Attack"},           matsAndTokens = {"-1 Card Token"},                                                      sheet = {name = "", position = "00"} },
    ["Royal Carriage"]    = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action", "Reserve"},                                                                                                    sheet = {name = "", position = "00"} },
    ["Storyteller"]       = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action"},                                                                                                               sheet = {name = "", position = "00"} },
    ["Swamp Hag"]         = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action", "Attack", "Duration"},                                                                                         sheet = {name = "", position = "00"} },
    ["Treasure Trove"]    = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Treasure"},                                                                                                             sheet = {name = "", position = "00"} },
    ["Wine Merchant"]     = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 5}, type = {"Action", "Reserve"},                                                                                                    sheet = {name = "", position = "00"} },
    ["Hireling"]          = { set = "Adventures", class = {"Card", "Kingdom"},     cost = {Money = 6}, type = {"Action", "Duration"},                                                                                                   sheet = {name = "", position = "00"} },
    -- Traveller Upgrades
    ["Treasure Hunter"]   = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 3}, type = {"Action", "Traveller"},           nonSupply = {"Warrior Pile"},                                                          sheet = {name = "", position = "00"} },
    ["Warrior"]           = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 4}, type = {"Action", "Attack", "Traveller"}, nonSupply = {"Hero Pile"},                                                             sheet = {name = "", position = "00"} },
    ["Hero"]              = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 5}, type = {"Action", "Traveller"},           nonSupply = {"Champion Pile"},                                                         sheet = {name = "", position = "00"} },
    ["Champion"]          = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 6}, type = {"Action", "Duration"},                                                                                                   sheet = {name = "", position = "00"} },
    ["Soldier"]           = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 3}, type = {"Action", "Attack", "Traveller"}, nonSupply = {"Fugitive Pile"},                                                         sheet = {name = "", position = "00"} },
    ["Fugitive"]          = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 4}, type = {"Action", "Traveller"},           nonSupply = {"Disciple Pile"},                                                         sheet = {name = "", position = "00"} },
    ["Disciple"]          = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 5}, type = {"Action", "Traveller"},           nonSupply = {"Teacher Pile"},                                                          sheet = {name = "", position = "00"} },
    ["Teacher"]           = { set = "Adventures", class = {"Card", "Non-Supply"},  cost = {Money = 6}, type = {"Action", "Reserve"},             matsAndTokens = {"+1 Card Token", "+1 Action Token", "+1 Buy Token", "+1 Coin Token"}, sheet = {name = "", position = "00"} },
    -- Events
    ["Alms"]              = { set = "Adventures", class = {"Sideways"},            cost = {Money = 0}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Borrow"]            = { set = "Adventures", class = {"Sideways"},            cost = {Money = 0}, type = {"Event"},                         matsAndTokens = {"-1 Card Token"},                                                     sheet = {name = "", position = "00"} },
    ["Quest"]             = { set = "Adventures", class = {"Sideways"},            cost = {Money = 0}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Save"]              = { set = "Adventures", class = {"Sideways"},            cost = {Money = 1}, type = {"Event"},                         matsAndTokens = {"Set Aside Token"},                                                   sheet = {name = "", position = "00"} },
    ["Scouting Party"]    = { set = "Adventures", class = {"Sideways"},            cost = {Money = 2}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Travelling Fair"]   = { set = "Adventures", class = {"Sideways"},            cost = {Money = 2}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Bonfire"]           = { set = "Adventures", class = {"Sideways"},            cost = {Money = 3}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Expedition"]        = { set = "Adventures", class = {"Sideways"},            cost = {Money = 3}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Ferry"]             = { set = "Adventures", class = {"Sideways"},            cost = {Money = 3}, type = {"Event"},                         matsAndTokens = {"-2 Cost Token"},                                                     sheet = {name = "", position = "00"} },
    ["Plan"]              = { set = "Adventures", class = {"Sideways"},            cost = {Money = 3}, type = {"Event"},                         matsAndTokens = {"Trashing Token"},                                                    sheet = {name = "", position = "00"} },
    ["Mission"]           = { set = "Adventures", class = {"Sideways"},            cost = {Money = 4}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Pilgrimage"]        = { set = "Adventures", class = {"Sideways"},            cost = {Money = 4}, type = {"Event"},                         matsAndTokens = {"Journey Token"},                                                     sheet = {name = "", position = "00"} },
    ["Ball"]              = { set = "Adventures", class = {"Sideways"},            cost = {Money = 5}, type = {"Event"},                         matsAndTokens = {"-1 Coin Token"},                                                     sheet = {name = "", position = "00"} },
    ["Raid"]              = { set = "Adventures", class = {"Sideways"},            cost = {Money = 5}, type = {"Event"},                         matsAndTokens = {"-1 Card Token"},                                                     sheet = {name = "", position = "00"} },
    ["Seaway"]            = { set = "Adventures", class = {"Sideways"},            cost = {Money = 5}, type = {"Event"},                         matsAndTokens = {"+1 Buy Token"},                                                      sheet = {name = "", position = "00"} },
    ["Trade"]             = { set = "Adventures", class = {"Sideways"},            cost = {Money = 5}, type = {"Event"},                                                                                                                sheet = {name = "", position = "00"} },
    ["Lost Arts"]         = { set = "Adventures", class = {"Sideways"},            cost = {Money = 6}, type = {"Event"},                         matsAndTokens = {"+1 Action Token"},                                                   sheet = {name = "", position = "00"} },
    ["Training"]          = { set = "Adventures", class = {"Sideways"},            cost = {Money = 6}, type = {"Event"},                         matsAndTokens = {"+1 Coin Token"},                                                     sheet = {name = "", position = "00"} },
    ["Inheritance"]       = { set = "Adventures", class = {"Sideways"},            cost = {Money = 7}, type = {"Event"},                         matsAndTokens = {"Estate Token"},                                                      sheet = {name = "", position = "00"} },
    ["Pathfinding"]       = { set = "Adventures", class = {"Sideways"},            cost = {Money = 8}, type = {"Event"},                         matsAndTokens = {"+1 Card Token"},                                                     sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// EMPIRES
    ["Engineer"]                    = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Debt = 4},            type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["City Quarter"]                = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Debt = 8},            type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Overlord"]                    = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Debt = 8},            type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Royal Blacksmith"]            = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Debt = 8},            type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Encampment / Plunder"]        = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 2},           type = {"Action"},                              replacement = "Encampment / Plunder",        sheet = {name = "", position = "00"} },   -- split pile setup card
    ["Encampment"]                  = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 2},           type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Plunder"]                     = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Treasure"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Patrician / Emporium"]        = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 2},           type = {"Action"},                              replacement = "Patrician / Emporium",        sheet = {name = "", position = "00"} },   -- split pile setup card
    ["Patrician"]                   = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 2},           type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Emporium"]                    = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action"},                              matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Settlers / Bustling Village"] = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 2},           type = {"Action"},                              replacement = "Settlers / Bustling Village", sheet = {name = "", position = "00"} },    -- split pile setup card
    ["Settlers"]                    = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 2},           type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Bustling Village"]            = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Castles"]                     = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Victory", "Castle"},                   replacement = "Castles",                     sheet = {name = "", position = "00"} },    -- castles setup card
    ["Catapult / Rocks"]            = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Action", "Attack"},                    replacement = "Catapult / Rocks",            sheet = {name = "", position = "00"} },   --split pile setup card
    ["Catapult"]                    = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Action", "Attack"},                                                                 sheet = {name = "", position = "00"} },
    ["Rocks"]                       = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 4},           type = {"Treasure"},                                                                         sheet = {name = "", position = "00"} },
    ["Chariot Race"]                = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Action"},                              matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Enchantress"]                 = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Action", "Attack", "Duration"},                                                     sheet = {name = "", position = "00"} },
    ["Farmers' Market"]             = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Action", "Gathering"},                                                              sheet = {name = "", position = "00"} },
    ["Gladiator / Fortune"]         = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Action"},                              replacement = "Gladiator / Fortune",         sheet = {name = "", position = "00"} },    -- split pile setup card
    ["Gladiator"]                   = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Fortune"]                     = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 8, Debt = 8}, type = {"Treasure"},                                                                         sheet = {name = "", position = "00"} },
    ["Sacrifice"]                   = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 4},           type = {"Action"},                              matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Temple"]                      = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 4},           type = {"Action", "Gathering"},                                                              sheet = {name = "", position = "00"} },
    ["Villa"]                       = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 4},           type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Archive"]                     = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action", "Duration"},                                                               sheet = {name = "", position = "00"} },
    ["Capital"]                     = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Treasure"},                            matsAndTokens = {"Debt"},                    sheet = {name = "", position = "00"} },
    ["Charm"]                       = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Treasure"},                                                                         sheet = {name = "", position = "00"} },
    ["Crown"]                       = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action", "Treasure"},                                                               sheet = {name = "", position = "00"} },
    ["Forum"]                       = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action"},                                                                           sheet = {name = "", position = "00"} },
    ["Groundskeeper"]               = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action"},                              matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Legionary"]                   = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action", "Attack"},                                                                 sheet = {name = "", position = "00"} },
    ["Wild Hunt"]                   = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action", "Gathering"},                                                              sheet = {name = "", position = "00"} },
    -- Castles
    ["Humble Castle"]               = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 3},           type = {"Treasure", "Victory", "Castle"},                                                    sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return sumTable(table.filter(deckLists[playerColor], function(_, k) return cards[k] and cards[k].type and hasValue(cards[k].type, "Castle") end))
        end
    },
    ["Crumbling Castle"]            = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 4},           type = {"Victory", "Castle"},           vp = 1, matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Small Castle"]                = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 5},           type = {"Action", "Victory", "Castle"}, vp = 2,                                              sheet = {name = "", position = "00"} },
    ["Haunted Castle"]              = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 6},           type = {"Victory", "Castle"},           vp = 2,                                              sheet = {name = "", position = "00"} },
    ["Opulent Castle"]              = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 7},           type = {"Action", "Victory", "Castle"}, vp = 3,                                              sheet = {name = "", position = "00"} },
    ["Sprawling Castle"]            = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 8},           type = {"Victory", "Castle"},           vp = 4,                                              sheet = {name = "", position = "00"} },
    ["Grand Castle"]                = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 9},           type = {"Victory", "Castle"},           vp = 5, matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["King's Castle"]               = { set = "Empires", class = {"Card", "Kingdom"}, cost = {Money = 10},          type = {"Victory", "Castle"},                                                                sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return 2 * sumTable(table.filter(deckLists[playerColor], function(_, k) return cards[k] and cards[k].type and hasValue(cards[k].type, "Castle") end))
        end
    },
    -- Events
    ["Triumph"]                     = { set = "Empires", class = {"Sideways"},        cost = {Debt = 5},            type = {"Event"},                               matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Annex"]                       = { set = "Empires", class = {"Sideways"},        cost = {Debt = 8},            type = {"Event"},                                                                            sheet = {name = "", position = "00"} },
    ["Donate"]                      = { set = "Empires", class = {"Sideways"},        cost = {Debt = 8},            type = {"Event"},                                                                            sheet = {name = "", position = "00"} },
    ["Advance"]                     = { set = "Empires", class = {"Sideways"},        cost = {Money = 0},           type = {"Event"},                                                                            sheet = {name = "", position = "00"} },
    ["Delve"]                       = { set = "Empires", class = {"Sideways"},        cost = {Money = 2},           type = {"Event"},                                                                            sheet = {name = "", position = "00"} },
    ["Tax"]                         = { set = "Empires", class = {"Sideways"},        cost = {Money = 2},           type = {"Event"},                               matsAndTokens = {"Debt"},                    sheet = {name = "", position = "00"} },
    ["Banquet"]                     = { set = "Empires", class = {"Sideways"},        cost = {Money = 3},           type = {"Event"},                                                                            sheet = {name = "", position = "00"} },
    ["Ritual"]                      = { set = "Empires", class = {"Sideways"},        cost = {Money = 4},           type = {"Event"},                               matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Salt the Earth"]              = { set = "Empires", class = {"Sideways"},        cost = {Money = 4},           type = {"Event"},                               matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Wedding"]                     = { set = "Empires", class = {"Sideways"},        cost = {Money = 4, Debt = 3}, type = {"Event"},                               matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Windfall"]                    = { set = "Empires", class = {"Sideways"},        cost = {Money = 5},           type = {"Event"},                                                                            sheet = {name = "", position = "00"} },
    ["Conquest"]                    = { set = "Empires", class = {"Sideways"},        cost = {Money = 6},           type = {"Event"},                               matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Dominate"]                    = { set = "Empires", class = {"Sideways"},        cost = {Money = 14},          type = {"Event"},                               matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    -- Landmarks
    ["Aqueduct"]                    = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Arena"]                       = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Bandit Fort"]                 = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            local total = 0
            if deckLists[playerColor]["Silver"] then total = total + -2 * deckLists[playerColor]["Silver"] end
            if deckLists[playerColor]["Gold"] then total = total + -2 * deckLists[playerColor]["Gold"] end
            return total
        end
    },
    ["Basilica"]                    = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Baths"]                       = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Battlefield"]                 = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Colonnade"]                   = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Defiled Shrine"]              = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Fountain"]                    = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            if deckLists[playerColor]["Copper"] and deckLists[playerColor]["Copper"] >= 10 then return 15 end
            return 0
        end
    },
    ["Keep"]                        = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            local total = 0
            local table = table.filter(deckLists[playerColor], function(_, k) return cards[k] and cards[k].type and hasValue(cards[k].type, "Treasure") end)
            for key, value in pairs(table) do
                local hasMoreThanAnyone = true
                for _, color in ipairs(players) do
                    if Player[color].seated and color ~= playerColor then
                        if deckLists[color][key] and deckLists[color][key] > value then
                            hasMoreThanAnyone = false
                            break
                        end
                    end
                end
                if hasMoreThanAnyone then total = total + 5 end
            end
            return total
        end
    },
    ["Labyrinth"]                   = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Mountain Pass"]               = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Debt", "Victory Points"},  sheet = {name = "", position = "00"} },
    ["Museum"]                      = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            return 2 * getCount(deckLists[playerColor])
        end
    },
    ["Obelisk"]                     = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function()
            printToAll("Obelisk isn't implemented yet!")
            return 0
        end
    },
    ["Orchard"]                     = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            local total = 0
            for key, value in pairs(deckLists[playerColor]) do
                if cards[key] and cards[key].type and hasValue(cards[key].type, "Action") then
                    if value >= 3 then total = total + 4 end
                end
            end
            return total
        end
    },
    ["Palace"]                      = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            if deckLists[playerColor]["Copper"] and deckLists[playerColor]["Silver"] and deckLists[playerColor]["Gold"] then
                return 3 * math.min(deckLists[playerColor]["Copper"], deckLists[playerColor]["Silver"], deckLists[playerColor]["Gold"])
            end
            return 0
        end
    },
    ["Tomb"]                        = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                            matsAndTokens = {"Victory Points"},          sheet = {name = "", position = "00"} },
    ["Tower"]                       = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function()
            printToAll("Tower isn't implemented yet!")
            return 0
        end
    },
    ["Triumphal Arch"]              = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            local highest = 0
            local secondHighest = 0
            for key, value in pairs(deckLists[playerColor]) do
                if cards[key] and hasValue(cards[key].type, "Action") then
                    if value > secondHighest then secondHighest = value end
                    if value > highest then secondHighest = highest; highest = value end
                end
            end
            return 3 * secondHighest
        end
    },
    ["Wall"]                        = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            return math.min(15 - sumTable(deckLists[playerColor]), 0)
        end
    },
    ["Wolf Den"]                    = { set = "Empires", class = {"Sideways"},                                      type = {"Landmark"},                                                                         sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor, object)
            return -3 * getCount(table.filter(deckLists[playerColor], function(v) return v == 1 end))
        end
    },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// NOCTURNE
    ["Druid"]                       = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 2}, type = {"Action", "Fate"},                                                                                 sheet = {name = "", position = "00"} },
    ["Faithful Hound"]              = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 2}, type = {"Action", "Reaction"},                                                                             sheet = {name = "", position = "00"} },
    ["Guardian"]                    = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 2}, type = {"Night", "Duration"},                                                                              sheet = {name = "", position = "00"} },
    ["Monastery"]                   = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 2}, type = {"Night"},                                                                                          sheet = {name = "", position = "00"} },
    ["Pixie"]                       = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 2}, type = {"Action", "Fate"},                                 heirloom = "Goat",                              sheet = {name = "", position = "00"} },
    ["Tracker"]                     = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 2}, type = {"Action", "Fate"},                                 heirloom = "Pouch",                             sheet = {name = "", position = "00"} },
    ["Changeling"]                  = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Night"},                                                                                          sheet = {name = "", position = "00"} },
    ["Fool"]                        = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Action", "Fate"},           extras = {["States"] = "Lost in the Woods"}, heirloom = "Lucky Coin", sheet = {name = "", position = "00"} },
    ["Ghost Town"]                  = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Night", "Duration"},                                                                              sheet = {name = "", position = "00"} },
    ["Leprechaun"]                  = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Action", "Doom"},           nonSupply = {"Wish"},                                                 sheet = {name = "", position = "00"} },
    ["Night Watchman"]              = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Night"},                                                                                          sheet = {name = "", position = "00"} },
    ["Secret Cave"]                 = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 3}, type = {"Action", "Duration"},       nonSupply = {"Wish"},   heirloom = "Magic Lamp",                      sheet = {name = "", position = "00"} },
    ["Bard"]                        = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action", "Fate"},                                                                                 sheet = {name = "", position = "00"} },
    ["Blessed Village"]             = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action", "Fate"},                                                                                 sheet = {name = "", position = "00"} },
    ["Cemetery"]                    = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Victory"},                  nonSupply = {"Ghost"},  heirloom = "Haunted Mirror", vp = 2,          sheet = {name = "", position = "00"} },
    ["Conclave"]                    = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                                                                         sheet = {name = "", position = "00"} },
    ["Devil's Workshop"]            = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Night"},                    nonSupply = {"Imp"},                                                  sheet = {name = "", position = "00"} },
    ["Exorcist"]                    = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Night"},                    nonSupply = {"Will-o'-Wisp", "Imp", "Ghost"},                         sheet = {name = "", position = "00"} },
    ["Necromancer"]                 = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                   extras = {["Zombies"] = true},                                              sheet = {name = "", position = "00"} },
    ["Shepherd"]                    = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action"},                                         heirloom = "Pasture",                           sheet = {name = "", position = "00"} },
    ["Skulk"]                       = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 4}, type = {"Action", "Attack", "Doom"},                                                                       sheet = {name = "", position = "00"} },
    ["Cobbler"]                     = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Night", "Duration"},                                                                              sheet = {name = "", position = "00"} },
    ["Crypt"]                       = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Night", "Duration"},                                                                              sheet = {name = "", position = "00"} },
    ["Cursed Village"]              = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Doom"},                                                                                 sheet = {name = "", position = "00"} },
    ["Den of Sin"]                  = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Night", "Duration"},                                                                              sheet = {name = "", position = "00"} },
    ["Idol"]                        = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Treasure", "Attack", "Fate"},                                                                     sheet = {name = "", position = "00"} },
    ["Pooka"]                       = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                         heirloom = "Cursed Gold",                       sheet = {name = "", position = "00"} },
    ["Sacred Grove"]                = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Fate"},                                                                                 sheet = {name = "", position = "00"} },
    ["Tormentor"]                   = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Attack", "Doom"}, nonSupply = {"Imp Pile"},                                             sheet = {name = "", position = "00"} },
    ["Tragic Hero"]                 = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action"},                                                                                         sheet = {name = "", position = "00"} },
    ["Vampire"]                     = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Night", "Attack", "Doom"},  nonSupply = {"Bat Pile"},                                             sheet = {name = "", position = "00"} },
    ["Werewolf"]                    = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 5}, type = {"Action", "Night", "Attack", "Doom"},                                                              sheet = {name = "", position = "00"} },
    ["Raider"]                      = { set = "Nocturne", class = {"Card", "Kingdom"},    cost = {Money = 6}, type = {"Night", "Duration", "Attack"},                                                                    sheet = {name = "", position = "00"} },
    -- Heirlooms
    ["Haunted Mirror"]              = { set = "Nocturne", class = {"Card", "Starter"},    cost = {Money = 0}, type = {"Treasure", "Heirloom"},                                                                           sheet = {name = "", position = "00"} },
    ["Magic Lamp"]                  = { set = "Nocturne", class = {"Card", "Starter"},    cost = {Money = 0}, type = {"Treasure", "Heirloom"},                                                                           sheet = {name = "", position = "00"} },
    ["Goat"]                        = { set = "Nocturne", class = {"Card", "Starter"},    cost = {Money = 2}, type = {"Treasure", "Heirloom"},                                                                           sheet = {name = "", position = "00"} },
    ["Pasture"]                     = { set = "Nocturne", class = {"Card", "Starter"},    cost = {Money = 2}, type = {"Treasure", "Victory", "Heirloom"},                                                                sheet = {name = "", position = "00"},
        score = function(deckLists, playerColor)
            return deckLists[playerColor]["Estate"] or 0
        end
    },
    ["Pouch"]                       = { set = "Nocturne", class = {"Card", "Starter"},    cost = {Money = 2}, type = {"Treasure", "Heirloom"},                                                                           sheet = {name = "", position = "00"} },
    ["Cursed Gold"]                 = { set = "Nocturne", class = {"Card", "Starter"},    cost = {Money = 4}, type = {"Treasure", "Heirloom"},                                                                           sheet = {name = "", position = "00"} },
    ["Lucky Coin"]                  = { set = "Nocturne", class = {"Card", "Starter"},    cost = {Money = 4}, type = {"Treasure", "Heirloom"},                                                                           sheet = {name = "", position = "00"} },
    -- Non-supply
    ["Will-o'-Wisp"]                = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action", "Spirit"},                                                                               sheet = {name = "", position = "00"} },
    ["Wish"]                        = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 0}, type = {"Action"},                                                                                         sheet = {name = "", position = "00"} },
    ["Bat"]                         = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 2}, type = {"Night"},                                                                                          sheet = {name = "", position = "00"} },
    ["Imp"]                         = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 2}, type = {"Action", "Spirit"},                                                                               sheet = {name = "", position = "00"} },
    ["Zombie Apprentice"]           = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 3}, type = {"Action", "Zombie"},                                                                               sheet = {name = "", position = "00"} },
    ["Zombie Mason"]                = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 3}, type = {"Action", "Zombie"},                                                                               sheet = {name = "", position = "00"} },
    ["Zombie Spy"]                  = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 3}, type = {"Action", "Zombie"},                                                                               sheet = {name = "", position = "00"} },
    ["Ghost"]                       = { set = "Nocturne", class = {"Card", "Non-Supply"}, cost = {Money = 4}, type = {"Night", "Duration", "Spirit"},                                                                    sheet = {name = "", position = "00"} },
    -- Boons
    ["The Earth's Gift"]            = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Field's Gift"]            = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Flame's Gift"]            = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Forest's Gift"]           = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Moon's Gift"]             = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Mountain's Gift"]         = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The River's Gift"]            = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Sea's Gift"]              = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Sky's Gift"]              = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Sun's Gift"]              = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    ["The Swamp's Gift"]            = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"}, nonSupply = {"Will-o'-Wisp Pile"},                                                        sheet = {name = "", position = "00"} },
    ["The Wind's Gift"]             = { set = "Nocturne", class = {"Extra"},                                  type = {"Boon"},                                                                                           sheet = {name = "", position = "00"} },
    -- Hexes
    ["Bad Omens"]                   = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["Delusion"]                    = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"}, extras = {["States"] = "Envious / Deluded"},                                               sheet = {name = "", position = "00"} },
    ["Envy"]                        = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"}, extras = {["States"] = "Envious / Deluded"},                                               sheet = {name = "", position = "00"} },
    ["Famine"]                      = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["Fear"]                        = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["Greed"]                       = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["Haunting"]                    = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["Locusts"]                     = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["Misery"]                      = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"}, extras = {["States"] = "Miserable / Twice Miserable"},                                     sheet = {name = "", position = "00"} },
    ["Plague"]                      = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["Poverty"]                     = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    ["War"]                         = { set = "Nocturne", class = {"Extra"},                                  type = {"Hex"},                                                                                            sheet = {name = "", position = "00"} },
    -- States
    ["Envious / Deluded"]           = { set = "Nocturne", class = {"Extra"},                                  type = {"State"},                                                                                          sheet = {name = "", position = "00"} },
    ["Miserable / Twice Miserable"] = { set = "Nocturne", class = {"Extra"},                                  type = {"State"},                                                                                          sheet = {name = "", position = "00"},
        score = function(_, _, object)
            if object.is_face_down then return -4 else return -2 end
        end
    },
    ["Lost in the Woods"]           = { set = "Nocturne", class = {"Extra"},                                  type = {"State"},                                                                                          sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// RENAISSANCE
    ["Border Guard"]     = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},                                          extras = {["Artifacts"] = {"Horn", "Lantern"}}, sheet = {name = "", position = "00"} },
    ["Ducat"]            = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Treasure"},           matsAndTokens = {"Coffers"},                                                 sheet = {name = "", position = "00"} },
    ["Lackeys"]          = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 2}, type = {"Action"},             matsAndTokens = {"Villagers"},                                               sheet = {name = "", position = "00"} },
    ["Acting Troupe"]    = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},             matsAndTokens = {"Villagers"},                                               sheet = {name = "", position = "00"} },
    ["Cargo Ship"]       = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action", "Duration"},                                                                              sheet = {name = "", position = "00"} },
    ["Experiment"]       = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Improve"]          = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Flag Bearer"]      = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                          extras = {["Artifacts"] = "Flag"},              sheet = {name = "", position = "00"} },
    ["Hideout"]          = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Inventor"]         = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Mountain Village"] = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Patron"]           = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Reaction"}, matsAndTokens = {"Coffers", "Villagers"},                                    sheet = {name = "", position = "00"} },
    ["Priest"]           = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Research"]         = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action", "Duration"},                                                                              sheet = {name = "", position = "00"} },
    ["Silk Merchant"]    = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},             matsAndTokens = {"Coffers", "Villagers"},                                    sheet = {name = "", position = "00"} },
    ["Old Witch"]        = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},                                                                                sheet = {name = "", position = "00"} },
    ["Recruiter"]        = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},             matsAndTokens = {"Villagers"},                                               sheet = {name = "", position = "00"} },
    ["Scepter"]          = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Treasure"},                                                                                        sheet = {name = "", position = "00"} },
    ["Scholar"]          = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Sculptor"]         = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},             matsAndTokens = {"Villagers"},                                               sheet = {name = "", position = "00"} },
    ["Seer"]             = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                                                                          sheet = {name = "", position = "00"} },
    ["Spices"]           = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Treasure"},           matsAndTokens = {"Coffers"},                                                 sheet = {name = "", position = "00"} },
    ["Swashbuckler"]     = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},             matsAndTokens = {"Coffers"}, extras = {["Artifacts"] = "Treasure Chest"},    sheet = {name = "", position = "00"} },
    ["Treasurer"]        = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                          extras = {["Artifacts"] = "Key"},               sheet = {name = "", position = "00"} },
    ["Villain"]          = { set = "Renaissance", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action", "Attack"},   matsAndTokens = {"Coffers"},                                                 sheet = {name = "", position = "00"} },
    -- Artifacts
    ["Flag"]             = { set = "Renaissance", class = {"Extra"},                               type = {"Artifact"},                                                                                        sheet = {name = "", position = "00"} },
    ["Horn"]             = { set = "Renaissance", class = {"Extra"},                               type = {"Artifact"},                                                                                        sheet = {name = "", position = "00"} },
    ["Key"]              = { set = "Renaissance", class = {"Extra"},                               type = {"Artifact"},                                                                                        sheet = {name = "", position = "00"} },
    ["Lantern"]          = { set = "Renaissance", class = {"Extra"},                               type = {"Artifact"},                                                                                        sheet = {name = "", position = "00"} },
    ["Treasure Chest"]   = { set = "Renaissance", class = {"Extra"},                               type = {"Artifact"},                                                                                        sheet = {name = "", position = "00"} },
    -- Projects
    ["Cathedral"]        = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 3}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["City Gate"]        = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 3}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Pageant"]          = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 3}, type = {"Project"},            matsAndTokens = {"Coffers"},                                                 sheet = {name = "", position = "00"} },
    ["Sewers"]           = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 3}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Star Chart"]       = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 3}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Exploration"]      = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 4}, type = {"Project"},            matsAndTokens = {"Coffers", "Villagers"},                                    sheet = {name = "", position = "00"} },
    ["Fair"]             = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 4}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Silos"]            = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 4}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Sinister Plot"]    = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 4}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Academy"]          = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 5}, type = {"Project"},            matsAndTokens = {"Villagers"},                                               sheet = {name = "", position = "00"} },
    ["Capitalism"]       = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 5}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Fleet"]            = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 5}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Guildhall"]        = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 5}, type = {"Project"},            matsAndTokens = {"Coffers"},                                                 sheet = {name = "", position = "00"} },
    ["Piazza"]           = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 5}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Road Network"]     = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 5}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Barracks"]         = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 6}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Crop Rotation"]    = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 6}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Innovation"]       = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 6}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Canal"]            = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 7}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    ["Citadel"]          = { set = "Renaissance", class = {"Sideways"},        cost = {Money = 8}, type = {"Project"},                                                                                         sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// MENAGERIE
    ["Black Cat"]            = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 2},  type = {"Action", "Attack", "Reaction"},                                      sheet = {name = "", position = "00"} },
    ["Sleigh"]               = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 2},  type = {"Action", "Reaction"},           nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Supplies"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 2},  type = {"Treasure"},                     nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Camel Train"]          = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 3},  type = {"Action"},                       matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Goatherd"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 3},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    ["Scrap"]                = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 3},  type = {"Action"},                       nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Sheepdog"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 3},  type = {"Action", "Reaction"},                                                sheet = {name = "", position = "00"} },
    ["Snowy Village"]        = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 3},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    ["Stockpile"]            = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 3},  type = {"Treasure"},                     matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Bounty Hunter"]        = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 4},  type = {"Action"},                       matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Cardinal"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 4},  type = {"Action", "Attack"},             matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Cavalry"]              = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 4},  type = {"Action"},                       nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Groom"]                = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 4},  type = {"Action"},                       nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Hostelry"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 4},  type = {"Action"},                       nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Village Green"]        = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 4},  type = {"Action", "Duration", "Reaction"},                                    sheet = {name = "", position = "00"} },
    ["Barge"]                = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action", "Duration"},                                                sheet = {name = "", position = "00"} },
    ["Coven"]                = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action", "Attack"},             matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Displace"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action"},                       matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Falconer"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action", "Reaction"},                                                sheet = {name = "", position = "00"} },
    ["Gatekeeper"]           = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action", "Duration", "Attack"}, matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Hunting Lodge"]        = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    ["Kiln"]                 = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    ["Livery"]               = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action"},                       nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Mastermind"]           = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action", "Duration"},                                                sheet = {name = "", position = "00"} },
    ["Paddock"]              = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action"},                       nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Sanctuary"]            = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action"},                       matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Fisherman"]            = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 5},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    ["Destrier"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 6},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    ["Wayfarer"]             = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 6},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    ["Animal Fair"]          = { set = "Menagerie", class = {"Card", "Kingdom"},    cost = {Money = 7},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    -- Events
    ["Delay"]                = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 0},  type = {"Event"},                        matsAndTokens = {"Set Aside Token"}, sheet = {name = "", position = "00"} },
    ["Desperation"]          = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 0},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Gamble"]               = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 2},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Pursue"]               = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 2},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Ride"]                 = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 2},  type = {"Event"},                        nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Toil"]                 = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 2},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Enhance"]              = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 3},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["March"]                = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 3},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Transport"]            = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 3},  type = {"Event"},                        matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Banish"]               = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 4},  type = {"Event"},                        matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Bargain"]              = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 4},  type = {"Event"},                        nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Invest"]               = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 4},  type = {"Event"},                        matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Seize the Day"]        = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 4},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Commerce"]             = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 5},  type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Demand"]               = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 5},  type = {"Event"},                        nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Stampede"]             = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 5},  type = {"Event"},                        nonSupply = {"Horse Pile"},          sheet = {name = "", position = "00"} },
    ["Reap"]                 = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 7},  type = {"Event"},                        matsAndTokens = {"Set Aside Token"}, sheet = {name = "", position = "00"} },
    ["Enclave"]              = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 8},  type = {"Event"},                        matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Alliance"]             = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 10}, type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    ["Populate"]             = { set = "Menagerie", class = {"Sideways"},           cost = {Money = 10}, type = {"Event"},                                                             sheet = {name = "", position = "00"} },
    -- Ways
    ["Way of the Butterfly"] = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Camel"]     = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                          matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    ["Way of the Chameleon"] = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Frog"]      = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Goat"]      = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Horse"]     = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Mole"]      = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Monkey"]    = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Mouse"]     = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Mule"]      = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Otter"]     = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Owl"]       = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Ox"]        = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Pig"]       = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Rat"]       = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Seal"]      = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Sheep"]     = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Squirrel"]  = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                                                               sheet = {name = "", position = "00"} },
    ["Way of the Turtle"]    = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                          matsAndTokens = {"Set Aside Token"}, sheet = {name = "", position = "00"} },
    ["Way of the Worm"]      = { set = "Menagerie", class = {"Sideways"},                                type = {"Way"},                          matsAndTokens = {"Exile Mat"},       sheet = {name = "", position = "00"} },
    -- Non-supply Cards
    ["Horse"]                = { set = "Menagerie", class = {"Card", "Non-Supply"}, cost = {Money = 3},  type = {"Action"},                                                            sheet = {name = "", position = "00"} },
    --////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PROMO CARDS
    ["Black Market"]   = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action"}, matsAndTokens = {"Black Market Mat"}, sheet = {name = "", position = "00"} },
    ["Church"]         = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 3}, type = {"Action", "Duration"},                           sheet = {name = "", position = "00"} },
    ["Dismantle"]      = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                       sheet = {name = "", position = "00"} },
    ["Envoy"]          = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                       sheet = {name = "", position = "00"} },
    ["Sauna / Avanto"] = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"}, replacement = "Sauna / Avanto",       sheet = {name = "", position = "00"} },         -- split pile setup card
    ["Sauna"]          = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                       sheet = {name = "", position = "00"} },
    ["Avanto"]         = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                       sheet = {name = "", position = "00"} },
    ["Walled Village"] = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 4}, type = {"Action"},                                       sheet = {name = "", position = "00"} },
    ["Governor"]       = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Action"},                                       sheet = {name = "", position = "00"} },
    ["Stash"]          = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 5}, type = {"Treasure"},                                     sheet = {name = "", position = "00"} },
    ["Captain"]        = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 6}, type = {"Action", "Duration"},                           sheet = {name = "", position = "00"} },
    ["Prince"]         = { set = "Promo", class = {"Card", "Kingdom"}, cost = {Money = 8}, type = {"Action"}, matsAndTokens = {"Set Aside Token"},  sheet = {name = "", position = "00"} },
    -- Events
    ["Summon"]         = { set = "Promo", class = {"Sideways"},        cost = {Money = 5}, type = {"Event"},  matsAndTokens = {"Set Aside Token"},  sheet = {name = "", position = "00"} },
}

-- a list of functionality of different card attributes (heirloom, etc)
CARD_ATTRIBUTES = {
    cost = {
        getDependencies = function(cardName, board, boardSettings)
            if cards[cardName] and cards[cardName].cost then
                -- add the Potions pile if this card costs potion
                if cards[cardName].cost["Potion"] then
                    board:AddBasicPile("Potions")
                end

                -- add debt tokens if this card costs debt
                if cards[cardName].cost["Debt"] then
                    board:AddMatOrToken("Debt")
                end
            end
        end
    },
    heirloom = {
        getDependencies = function(cardName, board, boardSettings)
            if cards[cardName] and cards[cardName].heirloom and boardSettings.otherSettings["Use Heirloom"] ~= false then
                board:AddStartingCard(cards[cardName].heirloom)
            end
        end
    }
}

-- a list of attributes for different types of card (Gathering, Looter, Etc)
types = {
    ["Victory"] = {
        getSupplyCount = function(name, board)
            return ((board.boardSettings.playerCount or getSeatedPlayerCount()) <= 2 and 8) or 12
        end
    },
    ["Looter"] = {
        getDependencies = function(cardName, board, boardSettings)
            -- looter needs to add Ruins
            board:AddBasicPile("Ruins Pile")
        end
    },
    ["Reserve"] = {
        getDependencies = function(cardName, board, boardSettings)
            board:AddMatOrToken("Tavern Mat")
        end
    },
    ["Gathering"] = {
        getDependencies = function(cardName, board, boardSettings)
            board:AddMatOrToken("Victory Points")
        end
    },
    ["Fate"] = {
        getDependencies = function(cardName, board, boardSettings)
            board:AddExtra("Boons", true)
        end
    },
    ["Doom"] = {
        getDependencies = function(cardName, board, boardSettings)
            board:AddExtra("Hexes", true)
        end
    },
    ["Project"] = {
        getDependencies = function(cardName, board, boardSettings)
            -- Project needs to add project tokens
            board:AddMatOrToken("Owns Project Tokens")
        end
    }
}

-- a list of each expansion and what cards are included (as well as basic cards and other materials)
sets = {                                                                                                                -- UNFINISHED
    ["Dominion"] = {
        kingdom = {
            sheet = {
                image = "http://cloud-3.steamusercontent.com/ugc/936063271535497820/245F2C7B6369FA193DE460A9CD68DCFA96F645A1/",
                width = 10,
                height = 3,
                number = 26
            },
            "Cellar",
            "Chapel",
            "Moat",
            "Harbinger",
            "Merchant",
            "Vassal",
            "Village",
            "Workshop",
            "Bureaucrat",
            "Gardens",
            "Militia",
            "Moneylender",
            "Poacher",
            "Remodel",
            "Smithy",
            "Throne Room",
            "Bandit",
            "Council Room",
            "Festival",
            "Laboratory",
            "Library",
            "Market",
            "Mine",
            "Sentry",
            "Witch",
            "Artisan"
        }
    },
    ["Intrigue"] = {

    },
    ["Seaside"] = {

    },
    ["Alchemy"] = {

    },
    ["Prosperity"] = {

    },
    ["Cornucopia"] = {

    },
    ["Hinterlands"] = {

    },
    ["Dark Ages"] = {

    },
    ["Guilds"] = {

    },
    ["Adventures"] = {

    },
    ["Empires"] = {

    },
    ["Nocturne"] = {

    },
    ["Renaissance"] = {

    },
    ["Menagerie"] = {

    },
    ["Promo"] = {

    },
    ["Cut Dominion Cards"] = {

    },
    ["Cut Intrigue Cards"] = {

    }
}

-- a table of what each replacement card replaces into and the zone the pile is in
replacementPiles = {
    --[[
    ["_Template"] = {
        -- what cards are part of the replacement pile
        contents = {"foo", "bar"},
        -- the guid of the zone and mat where the replacement pile is located
        guids = {["Zone"] = "123456", ["Mat"] = "654321"}
    }
    --]]
    ["Knights"] = {
        contents = {"Dame Anna", "Dame Josephine", "Dame Molly", "Dame Natalie", "Dame Sylvia", "Sir Bailey", "Sir Destry", "Sir Martin", "Sir Michael", "Sir Vander"},
        guids = {["Zone"] = "391e4e", ["Mat"] = "1c7b6c"},
        setup = function(board, zone)
            -- knights need to be shuffled
            -- wait one frame
            Wait.frames(function()
                local deck = findDeck(zone)
                if deck then
                    deck.randomize()
                end
            end, 1)
        end
    },
    ["Castles"] = {
        contents = {"Humble Castle", "Crumbling Castle", "Small Castle", "Haunted Castle", "Opulent Castle", "Sprawling Castle", "Grand Castle", "King's Castle"},
        guids = {["Zone"] = "f56b33", ["Mat"] = "6f8922"},
        setup = function(board, zone)
            -- extra castles need to be taken out
            if board.boardSettings.playerCount <= 2 then
            -- wait one frame
                Wait.frames(function()
                    local deck = findDeck(zone)
                    if deck then
                        for i, t in ipairs(deck.getObjects()) do
                            if t.name == "Humble Castle" then
                                safeTakeObject(deck, {index = i}).destruct()
                                break
                            end
                        end
                        for i, t in ipairs(deck.getObjects()) do
                            if t.name == "Small Castle" then
                                safeTakeObject(deck, {index = i}).destruct()
                                break
                            end
                        end
                        for i, t in ipairs(deck.getObjects()) do
                            if t.name == "Opulent Castle" then
                                safeTakeObject(deck, {index = i}).destruct()
                                break
                            end
                        end
                        for i, t in ipairs(deck.getObjects()) do
                            if t.name == "King's Castle" then
                                safeTakeObject(deck, {index = i}).destruct()
                                break
                            end
                        end
                    end
                end, 1)
            end
        end
    },
    ["Encampment / Plunder"] = {
        contents = {"Encampment", "Plunder"},
        guids = {["Zone"] = "e89af9", ["Mat"] = "783b87"}
    },
    ["Patrician / Emporium"] = {
        contents = {"Patrician", "Emporium"},
        guids = {["Zone"] = "95024c", ["Mat"] = "26968f"}
    },
    ["Settlers / Bustling Village"] = {
        contents = {"Settlers", "Bustling Village"},
        guids = {["Zone"] = "ee72e8", ["Mat"] = "8096b3"}
    },
    ["Catapult / Rocks"] = {
        contents = {"Catapult", "Rocks"},
        guids = {["Zone"] = "6ffbbe", ["Mat"] = "59ebc4"}
    },
    ["Gladiator / Fortune"] = {
        contents = {"Gladiator", "Fortune"},
        guids = {["Zone"] = "3b00c5", ["Mat"] = "ecab0e"}
    },
    ["Sauna / Avanto"] = {
        contents = {"Sauna", "Avanto"},
        guids = {["Zone"] = "6d491a", ["Mat"] = "5e88e2"}
    },
}

-- a table of every kingdom zone and mat
kingdomPiles = {
    {
        dontDestroy = true,
        guids = {["Zone"] = "3d368b", ["Mat"] = "cce6c6"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "21f484", ["Mat"] = "f6f74b"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "302acc", ["Mat"] = "c5c45f"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "0e683e", ["Mat"] = "66771c"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "1b15fb", ["Mat"] = "a83f0c"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "e5281c", ["Mat"] = "aea721"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "378a2a", ["Mat"] = "6eaafe"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "395cf8", ["Mat"] = "acddb6"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "ec5547", ["Mat"] = "e7d6f7"}
    },
    {
        dontDestroy = true,
        guids = {["Zone"] = "756903", ["Mat"] = "691cca"}
    },
    ["Bane"] = {
        guids = {["Zone"] = "9c5a7e", ["Mat"] = "df4a68"}
    }
}

-- a table of every sideways zone and mat
sidewaysPiles = {

}

-- a table of what each basic pile contains as well as the zone the pile is in and functionality
basicPiles = {
    ["Potions"] = {
        contents = {"Potion"},
        guids = {["Zone"] = "772aa2", ["Mat"] = "4f1bdf"}
    },
    ["Coppers"] = {
        contents = {"Copper"},
        guids = {["Zone"] = "3ed99d", ["Mat"] = "9a7cde"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Coppers"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Coppers.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    setDeckSize(deck, (((board.boardSettings.playerCount or getSeatedPlayerCount()) <= 4 and 60) or 120) - 7 * (board.boardSettings.playerCount or getSeatedPlayerCount()))
                end
            end
        end
    },
    ["Silvers"] = {
        contents = {"Silver"},
        guids = {["Zone"] = "82989a", ["Mat"] = "1a390b"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Silvers"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Silvers.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    setDeckSize(deck, ((board.boardSettings.playerCount or getSeatedPlayerCount()) <= 4 and 40) or 80)
                end
            end
        end
    },
    ["Golds"] = {
        contents = {"Gold"},
        guids = {["Zone"] = "fa1a9e", ["Mat"] = "1e6bc9"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Golds"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Golds.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    setDeckSize(deck, ((board.boardSettings.playerCount or getSeatedPlayerCount()) <= 4 and 30) or 60)
                end
            end
        end
    },
    ["Platinums"] = {
        contents = {"Platinum"},
        guids = {["Zone"] = "99c438", ["Mat"] = "b53849"}
    },
    ["Curses"] = {
        contents = {"Curse"},
        guids = {["Zone"] = "6555c4", ["Mat"] = "2b624e"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Curses"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Curses.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    setDeckSize(deck, math.max(((board.boardSettings.playerCount or getSeatedPlayerCount()) - 1) * 10, 10))
                end
            end
        end
    },
    ["Estates"] = {
        contents = {"Estate"},
        guids = {["Zone"] = "3c7d82", ["Mat"] = "fc44d0"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Estates"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Estates.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    setDeckSize(deck, ((board.boardSettings.playerCount or getSeatedPlayerCount()) <= 2 and 8) or 12)
                end
            end
        end
    },
    ["Duchies"] = {
        contents = {"Duchy"},
        guids = {["Zone"] = "abbc0e", ["Mat"] = "c80e6c"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Duchies"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Duchies.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    setDeckSize(deck, ((board.boardSettings.playerCount or getSeatedPlayerCount()) <= 2 and 8) or 12)
                end
            end
        end
    },
    ["Provinces"] = {
        contents = {"Province"},
        guids = {["Zone"] = "16a085", ["Mat"] = "46e094"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Provinces"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Provinces.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    local playerCount = (board.boardSettings.playerCount or getSeatedPlayerCount())
                    local size = 18
                    if playerCount <= 5 then size = 15 end
                    if playerCount <= 4 then size = 12 end
                    if playerCount <= 2 then size = 8 end
                    setDeckSize(deck, size)
                end
            end
        end
    },
    ["Colonies"] = {
        contents = {"Colony"},
        guids = {["Zone"] = "4e8983", ["Mat"] = "f22317"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Colonies"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Colonies.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    setDeckSize(deck, ((board.boardSettings.playerCount or getSeatedPlayerCount()) <= 2 and 8) or 12)
                end
            end
        end
    },
    ["Ruins Pile"] = {
        contents = {"Abandoned Mine", "Ruined Library", "Ruined Market", "Ruined Village", "Survivors"},
        guids = {["Zone"] = "e7b423", ["Mat"] = "624106"},
        setup = function(board)
            local zone = getObjectFromGUID(basicPiles["Ruins Pile"].guids["Zone"])
            if not zone then
                printToAll("No Zone found for Ruins Pile.", Color.Yellow)
            else
                local deck = findDeck(zone)
                if deck then
                    deck.randomize()
                    setDeckSize(deck, math.max(((board.boardSettings.playerCount or getSeatedPlayerCount()) - 1) * 10, 10))
                end
            end
        end
    },
}

-- a table of what each non-Supply pile contains as well as the zone the pile is in
nonSupplyPiles = {
    ["Prizes"] = {
        contents = {"Bag of Gold", "Diadem", "Followers", "Princess", "Trusty Steed"},
        guids = {["Zone"] = "29daf7", ["Mat"] = "d5887b"}
    },
    ["Madman Pile"] = {
        contents = "Madman",
        guids = {["Zone"] = "89dca4", ["Mat"] = "a3a3f8"}
    },
    ["Mercenary Pile"] = {
        contents = "Mercenary",
        guids = {["Zone"] = "9f282c", ["Mat"] = "264d5e"}
    },
    ["Spoils Pile"] = {
        contents = "Spoils",
        guids = {["Zone"] = "c4d056", ["Mat"] = "dedd90"}
    },
    ["Treasure Hunter Pile"] = {
        contents = "Treasure Hunter",
        guids = {["Zone"] = "07341c", ["Mat"] = "3f3675"}
    },
    ["Warrior Pile"] = {
        contents = "Warrior",
        guids = {["Zone"] = "ce4c41", ["Mat"] = "58b157"}
    },
    ["Hero Pile"] = {
        contents = "Hero",
        guids = {["Zone"] = "d1e459", ["Mat"] = "7ff05c"}
    },
    ["Champion Pile"] = {
        contents = "Champion",
        guids = {["Zone"] = "1ee432", ["Mat"] = "ac9988"}
    },
    ["Soldier Pile"] = {
        contents = "Soldier",
        guids = {["Zone"] = "fb602d", ["Mat"] = "fb8b29"}
    },
    ["Fugitive Pile"] = {
        contents = "Fugitive",
        guids = {["Zone"] = "1f6b93", ["Mat"] = "dd9c06"}
    },
    ["Disciple Pile"] = {
        contents = "Disciple",
        guids = {["Zone"] = "573b4a", ["Mat"] = "fb3a5a"}
    },
    ["Teacher Pile"] = {
        contents = "Teacher",
        guids = {["Zone"] = "af118c", ["Mat"] = "ddd6fe"}
    },
    ["Will-o'-Wisp Pile"] = {
        contents = "Will-o'-Wisp",
        guids = {["Zone"] = "8f8ba1", ["Mat"] = "be1e86"}
    },
    ["Wish Pile"] = {
        contents = "Wish",
        guids = {["Zone"] = "0fe09c", ["Mat"] = "76feaf"}
    },
    ["Bat Pile"] = {
        contents = "Bat",
        guids = {["Zone"] = "141a3f", ["Mat"] = "3734fb"}
    },
    ["Imp Pile"] = {
        contents = "Imp",
        guids = {["Zone"] = "c5c39f", ["Mat"] = "bef3f2"}
    },
    ["Ghost Pile"] = {
        contents = "Ghost",
        guids = {["Zone"] = "eb4c31", ["Mat"] = "0739ed"}
    },
    ["Horse Pile"] = {
        contents = "Horse",
        guids = {["Zone"] = "82ca0b", ["Mat"] = "b470be"}
    },
}

-- a table of each mat and token and its functionality
matsAndTokens = {
    ["Black Market Mat"] = {
        guids = {
            ["Mat"] = "b60e21",
            ["Deck"] = {["Zone"] = "a58e43", ["Mat"] = "031a4d"},
            ["Discard"] = {["Zone"] = "2ba401", ["Mat"] = "668dbc"}
        }
    },
    ["Trade Route Mat"] = {
        guids = {["Mat"] = "b853e8"}
    },
    ["Embargo Tokens"] = {
        guids = {"7c2165"}
    },
    ["Trash Mat"] = {
        dontDestroy = true,
        guids = {["Mat"] = "b282fd"}
    },
    ["Randomizer Deck"] = {
        guids = {
            ["Deck"] = {["Zone"] = "95a9d3", ["Mat"] = "e9084b"},
            ["Discard"] = {["Zone"] = "268abf", ["Mat"] = "148c0f"}
        }
    },
    ["Player Mat"] = {
        dontDestroy = true,
        guids = {
            ["Pink"]   = {["Zone"] = "66d256", ["Mat"] = "82d604"},
            ["Green"]  = {["Zone"] = "875144", ["Mat"] = "10b5cc"},
            ["White"]  = {["Zone"] = "be0568", ["Mat"] = "f20217"},
            ["Red"]    = {["Zone"] = "089ee2", ["Mat"] = "2fa48d"},
            ["Blue"]   = {["Zone"] = "8313c1", ["Mat"] = "a2a688"},
            ["Yellow"] = {["Zone"] = "37eaed", ["Mat"] = "eae7df"}
        }
    },
    ["Victory Points"] = {
        guids = {
            ["Pink"]   = "1a8a90",
            ["Green"]  = "318b12",
            ["White"]  = "fd9212",
            ["Red"]    = "a5bdfe",
            ["Blue"]   = "460fc7",
            ["Yellow"] = "48c7fe"
        }
    },
    ["Coffers"] = {
        guids = {
            ["Pink"]   = "4c451c",
            ["Green"]  = "1a8770",
            ["White"]  = "f6bff9",
            ["Red"]    = "a838ad",
            ["Blue"]   = "f9b793",
            ["Yellow"] = "0f2f7e"
        }
    },
    ["Debt"] = {
        guids = {
            ["Pink"]   = "2ba471",
            ["Green"]  = "048389",
            ["White"]  = "a5991e",
            ["Red"]    = "13cb98",
            ["Blue"]   = "359c7d",
            ["Yellow"] = "d26450"
        }
    },
    ["Villagers"] = {
        guids = {
            ["Pink"]   = "89f6fb",
            ["Green"]  = "5134b3",
            ["White"]  = "71247d",
            ["Red"]    = "9ab08c",
            ["Blue"]   = "9164ca",
            ["Yellow"] = "e9311d"
        }
    },
    ["Pirate Ship Coins"] = {
        guids = {
            ["Pink"]   = "07ec19",
            ["Green"]  = "4de60b",
            ["White"]  = "31e422",
            ["Red"]    = "d114f5",
            ["Blue"]   = "6a1b94",
            ["Yellow"] = "f39723"
        }
    },
    ["Exile Mat"] = {
        guids = {
            ["Pink"]   = "8c43c7",
            ["Green"]  = "41ff7f",
            ["White"]  = "b84b53",
            ["Red"]    = "c175d2",
            ["Blue"]   = "b2c72e",
            ["Yellow"] = "6bab0a"
        }
    },
    ["Tavern Mat"] = {
        dontDestroyDeck = true,
        guids = {
            ["Pink"]   = {["Zone"] = "b742a1", ["Mat"] = "73b44f"},
            ["Green"]  = {["Zone"] = "e53225", ["Mat"] = "0c3771"},
            ["White"]  = {["Zone"] = "50c9ee", ["Mat"] = "4caf71"},
            ["Red"]    = {["Zone"] = "f1a05f", ["Mat"] = "3932e5"},
            ["Blue"]   = {["Zone"] = "dca674", ["Mat"] = "76e257"},
            ["Yellow"] = {["Zone"] = "e57747", ["Mat"] = "38103f"}
        }
    },
    ["Native Village Mat"] = {
        guids = {
            ["Pink"]   = "3f337f",
            ["Green"]  = "2fa2e2",
            ["White"]  = "fd4653",
            ["Red"]    = "8d8bb1",
            ["Blue"]   = "62814d",
            ["Yellow"] = "52a2e8"
        }
    },
    ["Deck"] = {
        dontDestroy = true,
        dontDestroyDeck = true,
        guids = {
            ["Pink"]   = {["Zone"] = "161880", ["Mat"] = "dc840a"},
            ["Green"]  = {["Zone"] = "3e5cfc", ["Mat"] = "996e9f"},
            ["White"]  = {["Zone"] = "f2146c", ["Mat"] = "e4c378"},
            ["Red"]    = {["Zone"] = "5eca2b", ["Mat"] = "53b5fb"},
            ["Blue"]   = {["Zone"] = "dde784", ["Mat"] = "a044b0"},
            ["Yellow"] = {["Zone"] = "1fed5b", ["Mat"] = "cda6b9"}
        }
    },
    ["Discard"] = {
        dontDestroy = true,
        dontDestroyDeck = true,
        guids = {
            ["Pink"]   = {["Zone"] = "eca8c0", ["Mat"] = "806f43"},
            ["Green"]  = {["Zone"] = "44c6e3", ["Mat"] = "b6f3bc"},
            ["White"]  = {["Zone"] = "b48e02", ["Mat"] = "c50c38"},
            ["Red"]    = {["Zone"] = "16c9ce", ["Mat"] = "bb969d"},
            ["Blue"]   = {["Zone"] = "34fc95", ["Mat"] = "d90a4d"},
            ["Yellow"] = {["Zone"] = "7916e6", ["Mat"] = "d223fd"}
        }
    },
    ["Island Mat"] = {
        guids = {
            ["Pink"]   = "1f1d47",
            ["Green"]  = "a58748",
            ["White"]  = "cae961",
            ["Red"]    = "47484f",
            ["Blue"]   = "f42e05",
            ["Yellow"] = "5c7e33"
        }
    },
    ["Set Aside Token"] = {
        guids = {
            ["Pink"]   = "18fe35",
            ["Green"]  = "bfdd72",
            ["White"]  = "4d4d24",
            ["Red"]    = "65bcd7",
            ["Blue"]   = "461fcf",
            ["Yellow"] = "593fbd"
        }
    },
    ["-1 Card Token"] = {
        guids = {
            ["Pink"]   = "2f4572",
            ["Green"]  = "5c4411",
            ["White"]  = "c805b3",
            ["Red"]    = "01d25d",
            ["Blue"]   = "bd7bd7",
            ["Yellow"] = "ffca2f"
        }
    },
    ["-1 Coin Token"] = {
        guids = {
            ["Pink"]   = "b56d40",
            ["Green"]  = "f27cdd",
            ["White"]  = "60da3b",
            ["Red"]    = "ec3692",
            ["Blue"]   = "d7c452",
            ["Yellow"] = "d866a0"
        }
    },
    ["-2 Cost Token"] = {
        guids = {
            ["Pink"]   = "dd4db1",
            ["Green"]  = "2e7fb1",
            ["White"]  = "b1f09d",
            ["Red"]    = "2ccfa3",
            ["Blue"]   = "e29300",
            ["Yellow"] = "85112e"
        }
    },
    ["Trashing Token"] = {
        guids = {
            ["Pink"]   = "ef949d",
            ["Green"]  = "0a3d69",
            ["White"]  = "65caf8",
            ["Red"]    = "e4ac77",
            ["Blue"]   = "af8ff3",
            ["Yellow"] = "4fac52"
        }
    },
    ["Estate Token"] = {
        guids = {
            ["Pink"]   = "1a0ffd",
            ["Green"]  = "ed137a",
            ["White"]  = "a4e501",
            ["Red"]    = "2e6a7f",
            ["Blue"]   = "4b9e5b",
            ["Yellow"] = "78b646"
        }
    },
    ["Journey Token"] = {
        guids = {
            ["Pink"]   = "6be8c5",
            ["Green"]  = "c77f32",
            ["White"]  = "467620",
            ["Red"]    = "65676a",
            ["Blue"]   = "14f400",
            ["Yellow"] = "79f6b5"
        }
    },
    ["+1 Card Token"] = {
        guids = {
            ["Pink"]   = "c8b5e2",
            ["Green"]  = "e53945",
            ["White"]  = "9afa9c",
            ["Red"]    = "025ab0",
            ["Blue"]   = "6b586f",
            ["Yellow"] = "ce8a91"
        }
    },
    ["+1 Action Token"] = {
        guids = {
            ["Pink"]   = "96e1ef",
            ["Green"]  = "b6993b",
            ["White"]  = "99e974",
            ["Red"]    = "90b742",
            ["Blue"]   = "5959d0",
            ["Yellow"] = "3d3cd3"
        }
    },
    ["+1 Coin Token"] = {
        guids = {
            ["Pink"]   = "7b25b3",
            ["Green"]  = "322915",
            ["White"]  = "f5ffde",
            ["Red"]    = "cb6417",
            ["Blue"]   = "28e8f5",
            ["Yellow"] = "060245"
        }
    },
    ["+1 Buy Token"] = {
        guids = {
            ["Pink"]   = "8c6b69",
            ["Green"]  = "d683bf",
            ["White"]  = "11b9ad",
            ["Red"]    = "1621d1",
            ["Blue"]   = "04fed4",
            ["Yellow"] = "20603e"
        }
    },
    ["Owns Project Tokens"] = {
        guids = {
            ["Pink"]   = {"f89471", "e1aa16"},
            ["Green"]  = {"753f52", "53d51a"},
            ["White"]  = {"7056a3", "d3baa9"},
            ["Red"]    = {"b7dc65", "081686"},
            ["Blue"]   = {"356ba6", "fa4179"},
            ["Yellow"] = {"e891e5", "13557d"}
        },
        setup = function(board)
            local projectCount = 0
            for _, name in pairs(board:GetSideways()) do
                if cards[name] and cards[name].type and hasValue(cards[name].type, "Project") then
                    projectCount = projectCount + 1
                end
            end
            -- delete the extra token since it isn't needed
            if projectCount < 2 then
                local guids = matsAndTokens["Owns Project Tokens"].guids
                for _, t in pairs(guids) do
                    local obj = getObjectFromGUID(t[2])
                    if obj then
                        obj.destruct()
                    end
                end
            end
        end
    }
}

-- a table of what each extra group contains as well as the zone it is in
extras = {
    ["Zombies"] = {
        contents = {"Zombie Apprentice", "Zombie Mason", "Zombie Spy"},
        guids = {["Zone"] = "9abdb3"}
    },
    ["Boons"] = {
        contents = {
            "The Earth's Gift",
            "The Field's Gift",
            "The Flame's Gift",
            "The Forest's Gift",
            "The Moon's Gift",
            "The Mountain's Gift",
            "The River's Gift",
            "The Sea's Gift",
            "The Sky's Gift",
            "The Sun's Gift",
            "The Swamp's Gift",
            "The Wind's Gift"
        },
        guids = {["Deck"] = {["Zone"] = "8dbbe3", ["Mat"] = "859ea1"}, ["Discard"] = {["Zone"] = "e0da45", ["Mat"] = "486bcb"}}
    },
    ["Hexes"] = {
        contents = {
            "Bad Omens",
            "Delusion",
            "Envy",
            "Famine",
            "Fear",
            "Greed",
            "Haunting",
            "Locusts",
            "Misery",
            "Plague",
            "Poverty",
            "War"
        },
        guids = {["Deck"] = {["Zone"] = "132876", ["Mat"] = "ad947d"}, ["Discard"] = {["Zone"] = "ed70b1", ["Mat"] = "b37648"}}
    },
    ["States"] = {
        contents = {"Envious / Deluded", "Miserable / Twice Miserable", "Lost in the Woods"},
        guids = {["Zone"] = "f87b76", ["Mat"] = "5e43cc"}
    },
    ["Artifacts"] = {
        contents = {"Flag", "Horn", "Key", "Lantern", "Treasure Chest"},
        guids = {["Zone"] = "6000b8", ["Mat"] = "9c974f"}
    },
}

-- a table of general rules about how to game functions grouped by arbitrary groupings
BOARD_RULES = {
    -- rules about the basic piles (when to keep each and how many to use)
    ["Basic"] = {
        getDependencies = function(board, boardSettings)
            -- add the seven basic piles that are always used
            board:AddBasicPile("Coppers")
            board:AddBasicPile("Silvers")
            board:AddBasicPile("Golds")
            board:AddBasicPile("Curses")
            board:AddBasicPile("Estates")
            board:AddBasicPile("Duchies")
            board:AddBasicPile("Provinces")

            -- Colony and Plat are added below
            -- Potions are added based on cost
            -- Ruins are added based on card types
        end
    },
    ["Set Specific"] = {
        getDependencies = function(board, boardSettings)
            -- check the kingdom settings and see if plats or colonies need to be included
            local usePlat = boardSettings.otherSettings["Use Plat"]
            local useColonies = boardSettings.otherSettings["Use Colony"]
            if usePlat == nil or useColonies == nil then
                -- get a random randomizer card and see if its from prosperity
                local cardName = boardSettings.kingdom[math.random(#boardSettings.kingdom)]
                if cardName and cards[cardName] and cards[cardName].set == "Prosperity" then
                    usePlat = (usePlat == nil and true) or usePlat
                    useColonies = (useColonies == nil and true) or useColonies
                end
            end
            if usePlat then board:AddBasicPile("Platinums") end
            if useColonies then board:AddBasicPile("Colonies") end

            -- add the shelters if they are needed
            local useShelters = boardSettings.otherSettings["Use Shelters"]
            if useShelters == nil then
                -- get a random randomizer card and see if its from dark ages
                local cardName = boardSettings.kingdom[math.random(#boardSettings.kingdom)]
                if cardName and cards[cardName] and cards[cardName].set == "Dark Ages" then
                    useShelters = true
                end
            end
            if useShelters then
                board:AddStartingCard("Overgrown Estate")
                board:AddStartingCard("Necropolis")
                board:AddStartingCard("Hovel")
            end
        end
    }
}

-- a table of all sprite sheets and info about them
CustomDecks = {                                                                                                        -- UNFINISHED
    ["Basics"] = {
        FaceURL = "http://cloud-3.steamusercontent.com/ugc/936063271535495357/D6E8C0A5EC557F5FD577593359CC891AAAC0F128/",
        BackURL = CARD_BACK_IMAGE,
        NumWidth = 10,
        NumHeight = 2,
        BackIsHidden = true,
        UniqueBack = false,
        Type = 0
    },
    ["Dominion"] = {
        FaceURL = "http://cloud-3.steamusercontent.com/ugc/936063271535497820/245F2C7B6369FA193DE460A9CD68DCFA96F645A1/",
        BackURL = CARD_BACK_IMAGE,
        NumWidth = 10,
        NumHeight = 3,
        BackIsHidden = true,
        UniqueBack = false,
        Type = 0
    }
}

PREMADE_BOARDS = {
    ["_Template"] = BoardSettings:New({kingdom = {}}),
    ["First Game"] = BoardSettings:New({kingdom = {"Cellar", "Market", "Merchant", "Militia", "Mine", "Moat", "Remodel", "Smithy", "Village", "Workshop"}}),
    ["Size Distortion"] = BoardSettings:New({kingdom ={"Artisan", "Bandit", "Bureaucrat", "Chapel", "Festival", "Gardens", "Sentry", "Throne Room", "Witch", "Workshop"}}),
    ["Deck Top"] = BoardSettings:New({kingdom = {"Artisan", "Bureaucrat", "Council Room", "Festival", "Harbinger", "Laboratory", "Moneylender", "Sentry", "Vassal", "Village"}}),
}

-- for testing purposes
function test()
    local s = "123456"
    log(s[4])
end

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// GAME MANAGEMENT

-- performs setup that can only be done after everything loads
function onLoad(save_state)
    -- get save data
    save = (save_state ~= nil and save_state ~= "" and JSON.decode(save_state)) or defaultSave

    for key, value in pairs(defaultSave) do
        if save[key] == nil then
            save[key] = value
        end
    end

    Turns.enable = save.turnsEnabled

    if save.board then
        setmetatable(save.board, {__index = Board})
    end

    -- set a random seed
    math.randomseed(os.time())

    -- get all objects by guid
    objects = applyFunc(guids, function(k ,v) return getObjectFromGUID(v) end)

    -- load buttons that are in the scene (or make default buttons)
    loadButtons()
end

-- saves everything in save
function onSave()
    save.turnsEnabled = Turns.enable

    return JSON.encode(save)
end

-- resets the save data back to default (used through /execute)
function resetSave()
    save = defaultSave
    print("Save reset!")
    self.script_state = JSON.encode(save)
    onLoad(self.script_state)
end

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BUTTONS

-- loads default buttons based on what gamestate it is
function loadButtons()
    generateButtonFunctions()
    updateButtons()
end

-- uses setVar to create button functions
function generateButtonFunctions()
    -- make functions for each player's shuffle
    for _, p in ipairs(players) do
        local name = buttonParamsPrototypes.shuffle(p).click_function
        local func = buttonFunctionPrototypes.shuffle(p)
        Global.setVar(name, func)
    end

    -- make a function for gaining a card
    local name = buttonParamsPrototypes.gain().click_function
    local func = buttonFunctionPrototypes.gain()
    Global.setVar(name, func)

    -- make a function for dealing randomizer cards
    local name = buttonParamsPrototypes.dealRandomizer().click_function
    local func = buttonFunctionPrototypes.validateAdmin(dealRandomizer)
    Global.setVar(name, func)

    -- make a function for setup
    local name = buttonParamsPrototypes.setup().click_function
    local func = buttonFunctionPrototypes.validateAdmin(setupKingdom)
    Global.setVar(name, func)

    -- make a function for end game
    local name = buttonParamsPrototypes.endGame().click_function
    local func = buttonFunctionPrototypes.validateAdmin(endGame)
    Global.setVar(name, func)
end

-- clears all tts buttons and makes new ones using what is currently saved in the buttons table
function updateButtons()
    if save.buttons == nil then return end

    for key, value in pairs(save.buttons) do
        -- get the object buttons is refering to
        local object = getObjectFromGUID(key)
        -- if that object still exists
        if object then
            -- clear all its buttons and make new ones matching the ones in buttons
            object.clearButtons()
            local index = 0
            for name, buttonInfo in pairs(value) do
                object.createButton(buttonInfo.params)
                buttonInfo.index = index
                index = index + 1
            end
        else
            -- no object was found so delete the buttons from buttons
            save.buttons[key] = nil
        end
    end
end

-- edits one list of button params with new params
function changeParams(old, new)
    local table = {}
    if new.click_function or old.click_function then table.click_function = new.click_function or old.click_function end
    if new.function_owner or old.function_owner then table.function_owner = new.function_owner or old.function_owner end
    if new.label          or old.label          then table.label          = new.label          or old.label          end
    if new.position       or old.position       then table.position       = new.position       or old.position       end
    if new.rotation       or old.rotation       then table.rotation       = new.rotation       or old.rotation       end
    if new.scale          or old.scale          then table.scale          = new.scale          or old.scale          end
    if new.width          or old.width          then table.width          = new.width          or old.width          end
    if new.height         or old.height         then table.height         = new.height         or old.height         end
    if new.font_size      or old.font_size      then table.font_size      = new.font_size      or old.font_size      end
    if new.color          or old.color          then table.color          = new.color          or old.color          end
    if new.font_color     or old.font_color     then table.font_color     = new.font_color     or old.font_color     end
    if new.hover_color    or old.hover_color    then table.hover_color    = new.hover_color    or old.hover_color    end
    if new.press_color    or old.press_color    then table.press_color    = new.press_color    or old.press_color    end
    if new.tooltip        or old.tooltip        then table.tooltip        = new.tooltip        or old.tooltip        end

    return table
end

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// AUTO SETUP

-- deals out randomizer cards into the kingdom supply
function dealRandomizer()
    local randomizerDeck = findDeck(objects["Randomizer Deck Zone"])
    if randomizerDeck then
        randomizerDeck.setRotation(vector(0, 180, 180))
        randomizerDeck.randomize()
    else
        -- there is no deck so there's no point in going further
        return
    end


    -- tables of zones which have not been filled yet
    local emptyKingdomSpots = {}
    local emptyEventSlots = {}

    local eventTypes = {"Event", "Landmark", "Project", "Way"}

    -- find what zones already have cards in them
    for _, zone in ipairs(objects.supply.kingdomZones) do
        if findDeck(zone) == nil then
            table.insert(emptyKingdomSpots, zone)
        end
    end
    for _, zone in ipairs(objects.supply.eventZones) do
        if findDeck(zone) == nil then
            table.insert(emptyEventSlots, zone)
        end
    end

    function dealRandomizerCoroutine()
        for i = 0, 15 do
            coroutine.yield(0)
        end

        local unusedCards = {}   -- table of cards that were drawn but didn't get dealt out
        local targetDiscardPosition = objects["Randomizer Discard Zone"].getPosition()
        while #emptyKingdomSpots > 0 do
            -- get the deck and then check if there is one otherwise break out
            randomizerDeck = findDeck(objects["Randomizer Deck Zone"])
            if not randomizerDeck then break end
            -- get the card out of the deck
            local card = safeTakeObject(randomizerDeck, {index = 0, position = objects["Randomizer Deck Zone"].getPosition()})
            -- check if its an event type card
            if cards[card.getName()] and hasValueTable(cards[card.getName()].type, eventTypes) then
                if #emptyEventSlots > 0 then
                    card.setRotation(vector(0, 90, 0))
                    card.setPositionSmooth(emptyEventSlots[1].getPosition(), false, false)
                    table.remove(emptyEventSlots, 1)
                else
                    card.setRotation(vector(0, 180, 0))
                    card.setPositionSmooth(targetDiscardPosition, false, false)
                    table.insert(unusedCards, card)
                end
            else
                card.setRotation(vector(0, 180, 0))
                card.setPositionSmooth(emptyKingdomSpots[1].getPosition(), false, false)
                table.remove(emptyKingdomSpots, 1)
            end

            -- wait a little while until the next loop
            for i = 0, 5 do
                coroutine.yield(0)
            end
        end

        return 1
    end

    startLuaCoroutine(self, "dealRandomizerCoroutine")
end

-- sets up the board and starts the game
-- takes given board settings or gets them from what cards are on the table
function setupKingdom(boardSettings)
    -- Setup is done in the following order:
    -- Reads randomizer settings from the board if none were given and validates settings
    -- Creates a board object and puts it in save
        -- all cards have getDependencies called
        -- getDependencies should be where things like the black market deck are formed
        -- if a card needs to stop setup it should set board.isDirty to true
    -- Spawns in kingdom piles
        -- deletes extra sideways slots and moves and sorts cards
        -- deletes extra materials not needed in dependencies
    -- Performs setup of cards (cards are allowed to spawn things in during this step and setup can no longer be halted)
    -- Performs postsetup (cards can alter the effects of other cards if needed) [NOT CURRENTLY IMPLEMENTED]

    -- ////////////////////////////////////////////////////////////// Validate Settings

    -- whether or not the settings are already provided
    local hasSettings = (boardSettings and true) or false
    if hasSettings then
        if not isBoardSlotsEmpty() then
            printToAll("ERROR: Can't setup with settings when their are cards in the randomizer slots.", Color.Red)
            return
        end
        for _, name in ipairs(boardSettings.kingdom) do
            if not (cards[name] and cards[name].sheet) then
                printToAll("ERROR: Can't setup with settings that have unknown cards.", Color.Red)
                return
            end
        end
        for _, name in ipairs(boardSettings.sideways) do
            if not (cards[name] and cards[name].sheet) then
                printToAll("ERROR: Can't setup with settings that have unknown cards.", Color.Red)
                return
            end
        end
    end

    local boardSettings = boardSettings or BoardSettings:New()
    if not hasSettings then boardSettings:ReadSettings() end

    if not boardSettings:ValidateSettings(save.debug) then
        printToAll("ERROR: Not a valid board setup.", Color.Red)
        return
    end

    local board = Board:New()
    board:SetBoard(boardSettings)

    -- the rest needs to be a seperate function so we can wait for the board to be set up
    local finishSetup = function()
        if board.isDirty then return end
        save.board = board

        -- ///////////////////////////////////////////////////////// Spawn in piles

        -- sort the board
        local kingdomNamesToObjects = {}
        local sidewaysNamesToObjects = {}
        if not hasSettings then
            local lastIndex = 0
            for _, t in ipairs(board.kingdom) do
                for i = lastIndex + 1, #kingdomPiles do
                    local zone = getObjectFromGUID(kingdomPiles[i] and kingdomPiles[i].guids and kingdomPiles[i].guids["Zone"])
                    if not zone then
                        printToAll("No Zone found for kingdom pile \""..i.."\".", Color.Yellow)
                    else
                        local card = findDeck(zone)
                        if card then
                            kingdomNamesToObjects[t.randomizer] = card
                            lastIndex = i
                            break
                        end
                    end
                end
            end
            for key, t in pairs(board.otherKingdom) do
                local zone = getObjectFromGUID(kingdomPiles[key] and kingdomPiles[key].guids and kingdomPiles[key].guids["Zone"])
                if not zone then
                    printToAll("No Zone found for kingdom pile \""..key.."\".", Color.Yellow)
                else
                    local card = findDeck(zone)
                    if card then
                        kingdomNamesToObjects[t.randomizer] = card
                    end
                end
            end
            local lastIndex = 0
            for _, name in ipairs(board.sideways) do
                for i = lastIndex + 1, #objects.supply.eventZones do
                    local card = findDeck(objects.supply.eventZones[i])
                    if card then
                        sidewaysNamesToObjects[name] = card
                        lastIndex = i
                        break
                    end
                end
            end
        end

        board:Sort()

        -- spawn in kingdom piles
        for key, name in pairs(board:GetKingdomRandomizers()) do
            local zone = getObjectFromGUID(kingdomPiles[key] and kingdomPiles[key].guids and kingdomPiles[key].guids["Zone"])
            if not zone then
                printToAll("No Kingdom zone found for zone \""..key.."\".", Color.Yellow)
            else
                local card = kingdomNamesToObjects[name]
                local position = zone.getPosition()
                position.y = 1
                local rotation = vector(0, 180, 0)

                local isReplace = false
                local replaceZone = nil
                -- check if its a replacement and then clone the replacement deck
                if cards[name] and cards[name].replacement then
                    if not replacementPiles[cards[name].replacement] then
                        printToAll("No Replacement pile found for card \""..name.."\".", Color.Yellow)
                    else
                        isReplace = true
                    end
                end
                if isReplace then
                    replaceZone = getObjectFromGUID(replacementPiles[cards[name].replacement].guids["Zone"])
                    if not replaceZone then
                        printToAll("No Replacement pile zone found for card \""..name.."\".", Color.Yellow)
                    end
                end

                if isReplace and replaceZone then
                    local pile = findDeck(replaceZone)
                    if pile then
                        local clone = pile.clone()
                        clone.setPosition(position)
                        clone.setRotation(rotation)
                        if clone.type == "Deck" then clone.setName(name .. " Pile") end
                    end
                -- check if the card object that we are cloning exists (if not then spawn based on name)
                elseif card then
                    local data = card.getData()
                    local deckData = {}
                    local supplyCount = callCardFunc(name, "getSupplyCount", board) or getCardProperty(name, "supplyCount") or 10
                    for i = 1, supplyCount do
                        deckData[i] = data
                    end
                    local clone = spawnObjectData(getDeckDataTable(deckData))
                    clone.setPosition(position)
                    clone.setRotation(rotation)
                    if clone.type == "Deck" then clone.setName(name .. " Pile") end
                else
                    local data = getCardDataName(name)
                    if data ~= nil then
                        local deckData = {}
                        local supplyCount = callCardFunc(name, "getSupplyCount", board) or getCardProperty(name, "supplyCount") or 10
                        for i = 1, supplyCount do
                            deckData[i] = data
                        end
                        local clone = spawnObjectData(getDeckDataTable(deckData))
                        clone.setPosition(position)
                        clone.setRotation(rotation)
                        if clone.type == "Deck" then clone.setName(name .. " Pile") end
                    else
                        printToAll("Failed to spawn pile from name for card \""..name.."\".", Color.Yellow)
                    end
                end
            end
            if kingdomNamesToObjects[name] then kingdomNamesToObjects[name].destruct() end
        end

        -- delete extra sideways mat and zones and move the remaining ones into position
        local sidewaysPadding = 5.2     -- the distance on x between adjacent sideways supplies
        -- delete extra first
        for i, v in ipairs(objects.supply.eventZones) do
            if i > #board.sideways then
                v.destruct()
                objects.supply.eventZones[i] = nil
                objects.supply.eventMats[i].destruct()
                objects.supply.eventMats[i] = nil
            end
        end
        -- move remaining mats and zones so they are centered
        for i, v in ipairs(objects.supply.eventZones) do
            local leftMostX = -1 * ((#board.sideways - 1) / 2) * sidewaysPadding
            local position = v.getPosition()
            position.x = leftMostX + sidewaysPadding * (i - 1)
            v.setPosition(position)
            position = objects.supply.eventMats[i].getPosition()
            position.x = leftMostX + sidewaysPadding * (i - 1)
            objects.supply.eventMats[i].setPosition(position)
        end

        -- spawn in sideways cards
        for key, name in pairs(board:GetSideways()) do
            local zone = objects.supply.eventZones[key]
            if not zone then
                printToAll("No Sideways zone found for name \""..key.."\".", Color.Yellow)
            else
                local card = sidewaysNamesToObjects[name]
                if card then
                    card.setLock(false)    -- just in case
                    card.setRotation(vector(0, 90, 0))
                    local pos = zone.getPosition()
                    pos.y = 1
                    card.setPosition(pos)
                    -- make a function to lock them in place after they are rested
                    Wait.condition(
                        function() -- Executed after our condition is met
                            if not card.isDestroyed() then
                                card.setLock(true)
                            end
                        end,
                        function() -- Condition function
                            return card.isDestroyed() or card.resting
                        end
                    )
                else
                    local data = getCardDataName(name)
                    local card = spawnObjectData(data)
                    if not card then
                        printToAll("No Sideways card data found for card \""..name.."\".", Color.Yellow)
                    else
                        card.setLock(false)    -- just in case
                        card.setRotation(vector(0, 90, 0))
                        local pos = zone.getPosition()
                        pos.y = 1
                        card.setPosition(pos)
                        -- make a function to lock them in place after they are rested
                        Wait.condition(
                            function() -- Executed after our condition is met
                                if not card.isDestroyed() then
                                    card.setLock(true)
                                end
                            end,
                            function() -- Condition function
                                return card.isDestroyed() or card.resting
                            end
                        )
                    end
                end
            end
        end

        -- ///////////////////////////////////////////////////////// Delete extras and move things around

        local dependencies = board:GetDependenciesSet()
        local deleteObjects = function(name, t)
            if not dependencies[name] and not t.dontDestroy and t.guids then
                if not t.dontDestroyDeck then
                    local zone = getObjectFromGUID(t.guids["Zone"])
                    if zone then
                        local deck = findDeck(zone)
                        if deck then
                            deck.destruct()
                        end
                    end
                end
                for _, guid in pairs(t.guids) do
                    if type(guid) == "table" then
                        if not t.dontDestroyDeck then
                            local zone = getObjectFromGUID(guid["Zone"])
                            if zone then
                                local deck = findDeck(zone)
                                if deck then
                                    deck.destruct()
                                end
                            end
                        end
                        for _, guid2 in pairs(guid) do
                            local obj = getObjectFromGUID(guid2)
                            if obj then
                                obj.destruct()
                            end
                        end
                    else
                        local obj = getObjectFromGUID(guid)
                        if obj then
                            obj.destruct()
                        end
                    end
                end
            end
        end
        -- delete basic piles
        for name, t in pairs(basicPiles) do
            deleteObjects(name, t)
        end
        -- delete other kingdom piles
        for name, t in pairs(kingdomPiles) do
            deleteObjects(name, t)
        end
        -- delete other sideways piles
        for name, t in pairs(sidewaysPiles) do
            deleteObjects(name, t)
        end
        -- delete nonSupply
        for name, t in pairs(nonSupplyPiles) do
            deleteObjects(name, t)
        end
        -- delete mats and tokens
        for name, t in pairs(matsAndTokens) do
            deleteObjects(name, t)
        end
        -- delete extras
        for name, t in pairs(extras) do
            deleteObjects(name, t)
        end
        -- delete replacement piles
        for name, t in pairs(replacementPiles) do
            deleteObjects(name, t)
        end

        -- ///////////////////////////////////////////////////////// Perform extra setup steps

        -- setup the basic rules of the game (shelters, etc)
        for _, t in pairs(BOARD_RULES) do
            if t.setup then
                t.setup(board)
            end
        end
        -- setup basic piles
        for name, t in pairs(board.basics) do
            if basicPiles[name] then
                if basicPiles[name].setup then
                    basicPiles[name].setup(board)
                end
            else
                printToAll("No Basic pile found for name \""..name.."\".", Color.Yellow)
            end
        end
        -- setup kingdom piles
        for k, t in pairs(board:GetKingdomContentsTable()) do
            local zone = objects.supply.kingdomZones[k]
            for _, name in ipairs(t) do
                callCardEvent(name, "setup", board, zone)
            end
        end
        -- also call the replacement pile if its a replacement card
        for k, name in pairs(board:GetKingdomRandomizers()) do
            local zone = objects.supply.kingdomZones[k]
            if cards[name] and cards[name].replacement and replacementPiles[cards[name].replacement] and replacementPiles[cards[name].replacement].setup then
                replacementPiles[cards[name].replacement].setup(board, zone)
            end
        end
        -- setup sideways cards
        for k, name in pairs(board:GetSideways()) do
            local zone = objects.supply.eventZones[k]
            callCardEvent(name, "setup", board, zone)
        end
        -- setup nonSupply
        for k, t in pairs(board.nonSupply) do
            local zone = objects.nonSupply.zones[k]
            for _, name in ipairs(t) do
                callCardEvent(name, "setup", board, zone)
            end
        end
        -- setup mats and tokens
        for name in pairs(board.matsAndTokens) do
            if matsAndTokens[name] then
                if matsAndTokens[name].setup then
                    matsAndTokens[name].setup(board)
                end
            else
                printToAll("No Mat or Token found for name \""..name.."\".", Color.Yellow)
            end
        end
        -- setup extras
        for name, t in pairs(board.extras) do
            if extras[name] then
                if extras[name].setup then
                    extras[name].setup(board)
                end
            else
                printToAll("No Extra found for name \""..name.."\".", Color.Yellow)
            end
        end
        -- setup starting cards
        for _, name in ipairs(board.startingCards) do
            callCardEvent(name, "setup", board)
        end

        -- ///////////////////////////////////////////////////////// Perform a final setup step for cards that need to change other card's effects

        -- NOT IMPLEMENTED (no cards need it)

        -- ///////////////////////////////////////////////////////// Starting the game

        -- shuffle decks and deal hands
        function setupKingdomCoroutine()
            for _, color in pairs(players) do
                -- discard cards in hand in case anyone drew anything
                discardHand(color)
            end

            -- wait for the cards to settle first
            for i=1, 60 do
                coroutine.yield(0)
            end

            for _, color in ipairs(players) do
                -- shuffle and draw (if there is someone seated there)
                local zone = getObjectFromGUID(matsAndTokens["Deck"].guids[color]["Zone"])
                if zone then
                    local deck = findDeck(zone)
                    if deck then deck.randomize() end
                    if Player[color].seated then drawAllCards(5, color) end
                end
            end

            -- set the turn order
            board.boardSettings:SetTurnOrder(players[math.random(#players)])
            Turns.order = board.boardSettings.turnOrder
            Turns.enable = true

            return 1
        end

        startLuaCoroutine(self, "setupKingdomCoroutine")

        -- create new buttons and remove old buttons
        save.buttons[objects["Button Zone"].guid]["Complete Setup"] = nil
        save.buttons[objects["Button Zone"].guid]["Deal Randomizer"] = nil
        save.buttons[objects["Button Zone"].guid]["End Game"] = {
            index = 0,
            params = buttonParamsPrototypes.endGame()
        }
        -- create gain buttons
        for key, value in pairs(objects.supply.kingdomZones) do
            if value ~= nil then
                local params = buttonParamsPrototypes.gain()
                params.position = vector(params.position.x, -0.2, params.position.z)
                save.buttons[value.guid] = {}
                save.buttons[value.guid]["Gain"] = {
                    index = 0,
                    params = params
                }
            end
        end
        for key, value in pairs(objects.supply.basicPileZones) do
            if value ~= nil then
                local params = buttonParamsPrototypes.gain()
                -- make the copper button higher if there are a lot of players
                if key == "Copper" and board.boardSettings.playerCount > 4 then
                    params.position = vector(params.position.x, 0.2, params.position.z)
                end
                save.buttons[value.guid] = {}
                save.buttons[value.guid]["Gain"] = {
                    index = 0,
                    params = params
                }
            end
        end
        for key, value in pairs(objects.nonSupply.zones) do
            if value ~= nil then
                save.buttons[value.guid] = {}
                save.buttons[value.guid]["Gain"] = {
                    index = 0,
                    params = buttonParamsPrototypes.gain()
                }
            end
        end
        if objects.supply.otherMats["Bane Mat"][2] then
            save.buttons[objects.supply.otherMats["Bane Mat"][2].guid] = {
                ["Gain"] = {
                    index = 0,
                    params = buttonParamsPrototypes.gain()
                }
            }
        end
        updateButtons()
    end

    -- finally start the finish setup function after board is done running
    Wait.condition(finishSetup,
        function()
            return board.coroutinesRunning <= 0
        end,
        30,
        function()
            printToAll("ERROR: Timeout. Board took too long to set up.", Color.Red)
        end
    )
end

-- returns true or false if the board slots have no cards in them
function isBoardSlotsEmpty()
    for _, zone in ipairs(objects.supply.kingdomZones) do
        local cardObjects = getAllCardsInZone(zone)
        if #cardObjects > 0 then
            return false
        end
    end
    for _, zone in ipairs(objects.supply.eventZones) do
        local cardObjects = getAllCardsInZone(zone)
        if #cardObjects > 0 then
            return false
        end
    end

    return true
end

-- sorts two cards by name a and b and returns true if a comes before b
-- a and b can also be tables of names that are in a pile
function sort(a, b)
    -- first sort by if they have a card definition
    if cards[a] == nil and cards[b] == nil then return a < b end    -- both aren't defined so sort alphabetically
    if cards[a] == nil then return true end       -- a is nil but b isn't so a comes before b
    if cards[b] == nil then return false end      -- b is nil but a isn't so b comes before a

    -- both exist so try sorting by if they have a cost
    if cards[a].cost == nil and cards[b].cost == nil then return a < b end    -- both costs aren't defined so sort alphabetically
    if cards[a].cost == nil then return true end       -- a's cost is nil but b isn't so a comes before b
    if cards[b].cost == nil then return false end      -- b's cost is nil but a isn't so b comes before a

    -- now they have costs so see if we can sort by money
    if cards[a].cost["Money"] ~= cards[b].cost["Money"] then
        if cards[a].cost["Money"] and cards[b].cost["Money"] then
            -- both have money costs that are different so return which one is smaller
            return cards[a].cost["Money"] < cards[b].cost["Money"]
        end
        if cards[a].cost["Money"] == nil then return true end -- a doesn't have a money cost and b does so it comes before b
        if cards[b].cost["Money"] == nil then return false end -- b doesn't have a money cost and a does so it comes before a
    end

    -- can't sort by money so sort by debt
    if cards[a].cost["Debt"] ~= cards[b].cost["Debt"] then
        if cards[a].cost["Debt"] and cards[b].cost["Debt"] then
            -- both have debt costs that are different so return which one is smaller
            return cards[a].cost["Debt"] < cards[b].cost["Debt"]
        end
        if cards[a].cost["Debt"] == nil then return true end -- a doesn't have a debt cost and b does so it comes before b
        if cards[b].cost["Debt"] == nil then return false end -- b doesn't have a debt cost and a does so it comes before a
    end

    -- can't sort by debt so sort by potion cost
    if cards[a].cost["Potion"] ~= cards[b].cost["Potion"] then
        if cards[a].cost["Potion"] and cards[b].cost["Potion"] then
            -- both have potion costs that are different so return which one is smaller
            return cards[a].cost["Potion"] < cards[b].cost["Potion"]
        end
        if cards[a].cost["Potion"] == nil then return true end -- a doesn't have a potion cost and b does so it comes before b
        if cards[b].cost["Potion"] == nil then return false end -- b doesn't have a potion cost and a does so it comes before a
    end

    -- finally sorting by cost didn't work so just sort alphabetically
    return a < b
end

-- takes an indexed table of cards objects and a position and forms a deck out of those card objects
-- returns the deck formed
function formDeckTable(cardTable, position)
    local paramsTable = {}

    for _, card in ipairs(cardTable) do
        local params = {}
        local data = card.getData()
        params.name = card.getName()
        params.transform = getTransform(position, vector(0, 180, 0), vector(1.5, 1, 1.5))
        params.sideways = data.SidewaysCard
        local deckID = math.floor(data.CardID / 100)
        params.sheetPos = data.CardID - deckID * 100
        params.sheet = {
            image = data.CustomDeck[deckID].FaceURL,
            width = data.CustomDeck[deckID].NumWidth,
            height = data.CustomDeck[deckID].NumHeight
        }
        params.cardBack = data.CustomDeck[deckID].BackURL
        table.insert(paramsTable, params)
    end

    for _, card in ipairs(cardTable) do
        card.destruct()
    end
    local deck = spawnDeck(paramsTable, "Pile", getTransform(position, vector(0, 180, 0), vector(1.5, 1, 1.5)))

    return deck
end

-- forms a deck with a given number of copies of a single card object
function formDeckCard(card, count, position)
    local paramsTable = {}

    local params = {}
    local data = card.getData()

    params.name = card.getName()
    params.transform = getTransform(position, vector(0, 180, 0), vector(1.5, 1, 1.5))
    params.sideways = data.SidewaysCard
    local deckID = math.floor(data.CardID / 100)
    params.sheetPos = data.CardID - deckID * 100
    params.sheet = {
        image = data.CustomDeck[deckID].FaceURL,
        width = data.CustomDeck[deckID].NumWidth,
        height = data.CustomDeck[deckID].NumHeight
    }
    params.cardBack = data.CustomDeck[deckID].BackURL

    for i = 1, count do
        table.insert(paramsTable, params)
    end

    local deckName = (card.getName() ~= "" and card.getName() .. " Pile") or "Pile"
    card.destruct()
    local deck = spawnDeck(paramsTable, deckName, getTransform(position, vector(0, 180, 0), vector(1.5, 1, 1.5)))

    return deck
end

-- forms a deck with a given number of copies of a single card by name
function formDeckName(name, count, position)
    local paramsTable = {}

    for i = 1, count do
        table.insert(paramsTable, {name = name})
    end

    local deckName = (name ~= "" and name .. " Pile") or "Pile"
    local deck = spawnDeck(paramsTable, deckName, getTransform(position, vector(0, 180, 0), vector(1.5, 1, 1.5)))

    return deck
end

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// AUTO CLEANUP

-- cleans up the play area and draws a new hand for the passing player
function onPlayerTurn(player, previous_player)
    -- if the game is being played and this isn't the first turn
    if player and previous_player and previous_player.seated then
        cleanup(previous_player.color)
    end
end

-- performs auto cleanup for a given color
function cleanup(color)
    function cleanupCoroutine()
        -- discard cards in the play area
        discardPlayArea(color)
        -- discard cards in hand
        discardHand(color)
        -- wait for the cards to settle first
        for i=1, 75 do
            coroutine.yield(0)
        end
        -- draw them a new hand
        local amountToDraw = 5
        drawAllCards(amountToDraw, color)

        return 1
    end

    startLuaCoroutine(self, "cleanupCoroutine")
end

-- moves all cards in the play area into a target color's discard pile
function discardPlayArea(color)
    local objectsInZone = objects["Play Area Zone"].getObjects()
    local discardPosition = objects.players[color].zones["Discard"].getPosition()

    -- functions used to move cards from inside a deck
    -- tests if this card should be moved to the discard
    local shouldDiscard = function(name) return cards[name] == nil or cards[name].class == nil or hasValue(cards[name].class, "Card") end
    -- moves the card to the discard it belongs to
    local moveToDiscard = function(object, name, guid)
        local position = (cards[name] and cards[name].discard and cards[name].discard()) or discardPosition
        safeTakeObject(object, {
            position = position,
            rotation = vector(0, 180, 0),
            guid = guid
        })
    end
    -- takes the card out of the deck and puts it where the deck is
    local moveOutOfDeck = function(object, guid)
        safeTakeObject(object, {
            position = object.getPosition(),
            rotation = object.getRotation(),
            guid = guid
        })
    end

    for _, v in pairs(objectsInZone) do
        if v.held_by_color == nil and v.locked == false then
            if v.type == "Card" then
                -- check if this card should be discarded
                if shouldDiscard(v.getName()) then moveToDiscard(v, v.getName(), v.getGUID()) end
            elseif v.type == "Deck" then
                -- we need to loop through each card in the deck and see if it needs to be removed
                for _, c in pairs(v.getObjects()) do
                    -- first check if there is a remainder
                    if v.remainder then
                        if shouldDiscard(v.remainder.getName()) then moveToDiscard(v.remainder, v.remainder.getName(), v.remainder.getGUID()) end
                        -- break for safety
                        break
                    end
                    -- check if this card should be discarded
                    if shouldDiscard(c.name) then moveToDiscard(v, c.name, c.guid) else moveOutOfDeck(v, c.guid) end
                end
            end
        end
    end
end

-- discards all cards in a color's hand to their discard
function discardHand(color)
    local objectsInHand = objects.players[color].zones["Hand"].getObjects()
    local position = objects.players[color].zones["Discard"].getPosition()
    local rotation = vector(0, 180, 0)

    for _, v in pairs(objectsInHand) do
        v.setRotation(rotation)
        v.setPosition(position)
    end
end

-- draws cards and shuffles discard until the given number of cards is drawn (or the cards run out)
function drawAllCards(number, color)
    function drawAllCardsCoroutine()
        number = number - drawCards(number, color)
        if number > 0 then
            -- we didn't draw all the cards we needed to so shuffle the deck and try again
            -- wait for the cards to get drawn
            for i=1, 30 do
                coroutine.yield(0)
            end
            -- shuffle the discard
            shuffleDiscard(color)
            -- wait
            for i=1, 30 do
                coroutine.yield(0)
            end
            -- draw the rest of the cards
            drawCards(number, color)
        end

        return 1
    end

    startLuaCoroutine(self, "drawAllCardsCoroutine")
end

-- tries to draw a given number of cards for a player (doesn't shuffle)
-- returns how many cards were successfully drawn
function drawCards(number, color)
    -- first find the player's deck
    local deck = findDeck(objects.players[color].zones["Deck"])

    if deck then
        local quantity = (deck.type == "Deck" and deck.getQuantity()) or 1
        deck.deal(number, color)
        return quantity
    end

    return 0
end

-- shuffles a player's discard pile into their deck
function shuffleDiscard(color)
    local deck = findDeck(objects.players[color].zones["Deck"])
    local discard = findDeck(objects.players[color].zones["Discard"])
    local target = objects.players[color].zones["Deck"].getPosition()

    if discard then
        if deck and deck.type == "Deck" then
            -- if there is a deck then put the discard into it
            local newDeck = deck.putObject(discard)
            deck = newDeck or deck      -- putObject can fail and return nil if someone is searching the container
        elseif deck and deck.type == "Card" then
            -- if there is just one card in the deck then put it in the discard and flip the discard over
            -- move the discard first to avoid a weird graphical bug
            discard.setRotation(vector(0, 180, 180))    -- set face down
            discard.setPosition(target)
            local newDeck = discard.putObject(deck)
            deck = newDeck or deck      -- putObject can fail and return nil if someone is searching the container
        else
            -- if there's no deck then flip the discard over
            discard.setRotation(vector(0, 180, 180))    -- set face down
            discard.setPosition(target)
            deck = discard
        end
    end
    -- finally shuffle
    if deck then deck.randomize() end
end

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// AUTO SCORING

-- initiates end of game cleanup and scoring
function endGame()
    function endGameCoroutine()
        -- gather all cards in play area to whoever's turn it is
        if Turns.turn_color and objects.players[Turns.turn_color] then
            discardPlayArea(Turns.turn_color)
        end
        -- discard all player's hands
        for k in pairs(objects.players) do
            discardHand(k)
        end
        -- wait for the cards to settle first
        for i=1, 75 do
            coroutine.yield(0)
        end

        -- generate all player's decklists based on what cards are in their play mat
        local deckLists = {}
        for k, p in pairs(objects.players) do
            deckLists[k] = generateDeckList(p.zones["Player Mat"])
        end
        -- score all cards where they are
        local scores = {}
        for _, color in ipairs(players) do
            scores[color] = calculateScore(deckLists, color)
        end
        -- also score the sideways cards
        for _, color in ipairs(players) do
            for _, zone in ipairs(objects.supply.eventZones) do
                local sideways = findDeck(zone)
                if cards[sideways.getName()] and cards[sideways.getName()].score then
                    scores[color] = scores[color] + cards[sideways.getName()].score(deckLists, color, sideways)
                end
            end
        end

        -- gather all cards in player mats and hands to their decks
        for _, p in pairs(objects.players) do
            local deck = group(getAllCardsInZone(p.zones["Player Mat"]))[1]
            if deck then
                deck.setRotation(vector(0, 180, 180))
                deck.setPosition(p.zones["Deck"].getPosition())
            end
        end
        -- wait for the cards to settle first
        for i=1, 40 do
            coroutine.yield(0)
        end

        -- spread out each player's victory cards
        for k, p in pairs(objects.players) do
            -- only spread out cards if that player is seated
            if Player[k].seated then
                spreadVictoryCards(k)
            end
        end

        -- display scores
        for k in pairs(objects.players) do
            -- only display if that color is seated
            if Player[k].seated then
                printToAll(k .. " scored " .. scores[k] .. " points.")
            end
        end

        -- turn off turns
        Turns.enable = false

        return 1
    end

    startLuaCoroutine(self, "endGameCoroutine")

    save.buttons[guids["Button Zone"]]["End Game"] = nil
    updateButtons()
end

-- returns a table as a deck list of all cards in a zone
function generateDeckList(zone)
    local objectsInZone = zone.getObjects()
    local list = {}

    for _, o in pairs(objectsInZone) do
        if o.type == "Card" then
            list[o.getName()] = (list[o.getName()] and list[o.getName()] + 1) or 1
        elseif o.type == "Deck" then
            local cardsInDeck = o.getObjects()
            for _, c in pairs(cardsInDeck) do
                list[c.name] = (list[c.name] and list[c.name] + 1) or 1
            end
        end
    end

    return list
end

-- returns the score calculated (scores card in the player mat)
-- player - the player color to be scored
function calculateScore(deckLists, playerColor)
    local scoreTotal = 0
    local objectsInZone = objects.players[playerColor].zones["Player Mat"].getObjects()

    local scoreCard = function(name, deckLists, playerColor, obj)
        local total = 0
        if cards[name] then
            if cards[name].score then
                total = total + cards[name].score(deckLists, playerColor, obj)
            elseif cards[name].vp then
                total = total + cards[name].vp
            end
        end
        return total
    end

    for _, o in pairs(objectsInZone) do
        if o.type == "Card" then
            scoreTotal = scoreTotal + scoreCard(o.getName(), deckLists, playerColor, o)
        elseif o.type == "Deck" then
            local cardsInDeck = o.getObjects()
            for _, c in pairs(cardsInDeck) do
                scoreTotal = scoreTotal + scoreCard(c.name, deckLists, playerColor, o)
            end
        end
    end

    -- also add the victory point tokens
    local vp = (objects.players[playerColor].tokens["Victory Points"] and objects.players[playerColor].tokens["Victory Points"].value) or 0
    scoreTotal = scoreTotal + vp

    return scoreTotal
end

-- spreads out the victory cards found in target player color's deck
function spreadVictoryCards(color)
    local deck = findDeck(objects.players[color].zones["Deck"])
    if deck == nil then return end
    -- keeps track of how many cards of each name have been spread out so far
    local cardsSpread = {}
    -- position of the 0, 0 position (offset is hard coded for now)
    local topRightPos = vector(deck.getPosition().x - 5.5, deck.getPosition().y, deck.getPosition().z + 28.5)
    local horzSpread = 1.2      -- distance along x each card in one group is moved
    local vertSpread = -2       -- distance along z each card between groups is moved
    local yDiff = 0.2           -- y buffer between groups so they layer properly

    -- functions used to handle cards
    local shouldMove = function(name) return cards[name] and hasValueTable(cards[name].type, {"Victory", "Curse"}) end
    -- moves object to correct positon based on how many cards with the same name we have found so far
    local move = function(object, name, guid)
        if cardsSpread[name] == nil then
            cardsSpread[name] = {
                group = getCount(cardsSpread),
                amount = 0
            }
        end
        local offset = vector(
            horzSpread * cardsSpread[name].amount,
            (yDiff * cardsSpread[name].group) + ((yDiff / 3) * cardsSpread[name].amount),
            vertSpread * cardsSpread[name].group
        )
        safeTakeObject(object, {
            position = topRightPos + offset,
            rotation = vector(0, 180, 0),
            guid = guid
        })
        cardsSpread[name].amount = cardsSpread[name].amount + 1
    end

    -- check the case where there is just a single card in the player's deck
    if deck.type == "Card" then
        if shouldMove(deck.getName()) then move(deck, deck.getName(), deck.guid) end
        return
    end

    -- the deck is a deck of cards
    -- go through each card in their deck and move them
    for _, v in pairs(deck.getObjects()) do
        if deck.remainder then
            if shouldMove(deck.remainder.getName()) then move(deck.remainder, deck.remainder.getName(), deck.remainder.guid) end
            -- break for safety
            break
        end

        if shouldMove(v.name) then move(deck, v.name, v.guid) end
    end
end

-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// HELPER FUNCTIONS

-- calls the event function name of a given card as well as on all its types and card attributes
function callCardEvent(cardName, identifier, ...)
    assert(cardName ~= nil, "ERROR: Cannot call event on card. Card name cannot be nil.")
    assert(identifier ~= nil, "ERROR: Cannot call event on card. Event identifier cannot be nil.")
    if not cards[cardName] then return end

    -- call function on the card's attributes
    for key, value in pairs(CARD_ATTRIBUTES) do
        if cards[cardName][key] then
            if value[identifier] then
                value[identifier](cardName, ...)
            end
        end
    end
    -- call function on the card's types
    if cards[cardName].type then
        for _, type in ipairs(cards[cardName].type) do
            if types[type] and types[type][identifier] then
                types[type][identifier](cardName, ...)
            end
        end
    end
    -- call function on the card
    if cards[cardName][identifier] then
        cards[cardName][identifier](...)
    end
end

-- calls the function name of a given card as well as on all its types and card attributes and returns the most specific return value
function callCardFunc(cardName, identifier, ...)
    assert(cardName ~= nil, "ERROR: Cannot call event on card. Card name cannot be nil.")
    assert(identifier ~= nil, "ERROR: Cannot call event on card. Event identifier cannot be nil.")
    if not cards[cardName] then return end

    -- call function on the card
    if cards[cardName][identifier] then
        return cards[cardName][identifier](...)
    end
    -- call function on the card's types
    if cards[cardName].type then
        for _, type in ipairs(cards[cardName].type) do
            if types[type] and types[type][identifier] then
                return types[type][identifier](cardName, ...)
            end
        end
    end
    -- call function on the card's attributes
    for key, value in pairs(CARD_ATTRIBUTES) do
        if cards[cardName][key] then
            if value[identifier] then
                return value[identifier](cardName, ...)
            end
        end
    end
end

-- returns the most specific value for a given property identifier
function getCardProperty(cardName, identifier)
    assert(cardName ~= nil, "ERROR: Cannot get property of card. Card name cannot be nil.")
    assert(identifier ~= nil, "ERROR: Cannot get property of card. Identifier cannot be nil.")
    if not cards[cardName] then return end

    -- get property of the card
    if cards[cardName][identifier] then
        return cards[cardName][identifier]
    end
    -- get property of the card's types
    if cards[cardName].type then
        for _, type in ipairs(cards[cardName].type) do
            if types[type] and types[type][identifier] then
                return types[type][identifier]
            end
        end
    end
    -- get property of the card's attributes
    for key, value in pairs(CARD_ATTRIBUTES) do
        if cards[cardName][key] then
            if value[identifier] then
                return value[identifier]
            end
        end
    end

    return nil
end

-- takes out the next randomizer dominion card (skipping sideways)
-- returns the card object dealt
function dealRandomizerCard()
    local zone = getObjectFromGUID(matsAndTokens["Randomizer Deck"] and matsAndTokens["Randomizer Deck"].guids and matsAndTokens["Randomizer Deck"].guids["Deck"] and matsAndTokens["Randomizer Deck"].guids["Deck"]["Zone"])
    if not zone then return nil end
    local deck = findDeck(zone)
    if not deck then return nil end

    if deck.type == "Card" then
        if (not cards[deck.getName()]) or (cards[deck.getName()].class and hasValue(cards[deck.getName()].class, "Card")) then
            return deck
        end
    elseif deck.type == "Deck" then
        local index = nil
        for _, card in ipairs(deck.getObjects()) do
            if (not cards[card.name]) or (cards[card.name].class and hasValue(cards[card.name].class, "Card")) then
                index = card.index
                break
            end
        end
        return deck.takeObject({index = index})
    end

    return nil
end

-- returns the table of all cards or decks in a zone
function getAllCardsInZone(zone)
    local objectsInZone = zone.getObjects()

    local cardsFound = {}
    for _, v in pairs(objectsInZone) do
        if v.type == "Card" or v.type == "Deck" then
            table.insert(cardsFound, v)
        end
    end

    return cardsFound
end

-- finds the first deck or card found inside a zone prioritizing decks before cards
function findDeck(zone)
    local objectsInZone = zone.getObjects()
    local deck = nil
    -- get the first deck found
    for _, o in pairs(objectsInZone) do
        if o.type == "Deck" then
            return o
        end
    end
    -- if no deck was found get the first card found instead
    for _, o in pairs(objectsInZone) do
        if o.type == "Card" then
            return o
        end
    end
    -- if nothing was found return nil
    return nil
end

-- takes a deck and sets it to a certain number of cards
-- deck is a tts deck object (or card)
-- size is a integer number of cards
-- IMPORTANT: Making a deck larger only copies the front facing card of the deck
--            Making a deck smaller only cuts the deck to the given size
--            Use only for decks with a single type of card in them
function setDeckSize(deck, size)
    if not deck then return end
    assert(type(size) == "number", "ERROR: Size must be an integer.")

    if size <= 0 then
        deck.destruct()
        return nil
    end

    if deck.type == "Card" then
        if size == 1 then return end

        local data = deck.getData()
        local deckData = {}
        for i = 1, size do
            table.insert(deckData, data)
        end
        local newDeck = spawnObjectData(getDeckDataTable(deckData))
        newDeck.setPosition(deck.getPosition())
        newDeck.setRotation(deck.getRotation())
        newDeck.setLock(deck.getLock())
        deck.destruct()
        return newDeck
    elseif deck.type == "Deck" then
        local getObjects = deck.getObjects()
        if size == #getObjects then
            return deck
        elseif size < #getObjects then
            local result = deck.cut(#getObjects - size)
            result[2].destruct()
            local pos = result[1].getPosition()
            pos.y = 1
            result[1].setPosition(pos)
        elseif size > #getObjects then
            local deckData = deck.getData()
            local cardData = deckData.ContainedObjects[#getObjects]
            for i = 1, size - #getObjects do
                table.insert(deckData.ContainedObjects, cardData)
            end
            local deckID = deckData.DeckIDs[#getObjects]
            for i = 1, size - #getObjects do
                table.insert(deckData.DeckIDs, deckID)
            end
            deck.destruct()
            return spawnObjectData(deckData)
        end
    end
end

-- returns how many players are seated at colors used in this game
function getSeatedPlayerCount()
    local count = 0
    -- count how many players are seated at actual player colors
    for _, player in ipairs(Player.getPlayers()) do
        if hasValue(players, player.color) then
            count = count + 1
        end
    end

    return count
end

-- creates and returns a Data table representing a new custom card
-- data is a table with keys the same as the table returned by getData
-- data at the very least should contain a CustomDeck and CardID
function getCardData(data)
    return {
        GUID = data.GUID or "000000",
        Name = data.Name or "Card",
        Transform = {
            posX = (data.Transform and data.Transform.posX) or 0,
            posY = (data.Transform and data.Transform.posY) or 5,
            posZ = (data.Transform and data.Transform.posZ) or 0,
            rotX = (data.Transform and data.Transform.rotX) or 0,
            rotY = (data.Transform and data.Transform.rotY) or 180,
            rotZ = (data.Transform and data.Transform.rotZ) or 0,
            scaleX = (data.Transform and data.Transform.scaleX) or 1.5,
            scaleY = (data.Transform and data.Transform.scaleY) or 1,
            scaleZ = (data.Transform and data.Transform.scaleZ) or 1.5
        },
        Nickname = data.Nickname or "",
        Description = data.Description or "",
        GMNotes = data.GMNotes or "",
        ColorDiffuse = {
            r = (data.ColorDiffuse and data.ColorDiffuse.r) or 0.7132353,
            g = (data.ColorDiffuse and data.ColorDiffuse.g) or 0.7132353,
            b = (data.ColorDiffuse and data.ColorDiffuse.b) or 0.7132353,
            a = (data.ColorDiffuse and data.ColorDiffuse.a) or 1
        },
        LayoutGroupSortIndex = data.LayoutGroupSortIndex or 0,
        Value = data.Value or 0,
        Locked = data.Locked or false,
        Grid = data.Grid or true,
        Snap = data.Snap or true,
        IgnoreFoW = data.IgnoreFoW or false,
        MeasureMovement = data.MeasureMovement or false,
        DragSelectable = data.DragSelectable or true,
        Autoraise = data.Autoraise or true,
        Sticky = data.Sticky or true,
        Tooltip = data.Tooltip or true,
        GridProjection = data.GridProjection or false,
        HideWhenFaceDown = data.HideWhenFaceDown or true,
        Hands = data.Hands or true,
        CardID = data.CardID,
        SidewaysCard = data.SidewaysCard or false,
        CustomDeck = data.CustomDeck,
        LuaScript = data.LuaScript or "",
        LuaScriptState = data.LuaScriptState or "",
        XmlUI = data.XmlUI or ""
    }
end

-- takes a CustomDeck and position and returns data for a card
function getCardDataCustomDeck(CustomDeck, position)
    if not CustomDeck then return nil end
    if not position or position > 99 or position < 0 then return nil end

    local data = {}
    data.CardID = 100 + position
    data.CustomDeck = {
        [1] = CustomDeck
    }
    return getCardData(data)
end

-- takes a name of a card and looks it up in the database to return a data table
function getCardDataName(name)
    if not (cards[name] and cards[name].sheet and cards[name].sheet.name and cards[name].sheet.position and CustomDecks[cards[name].sheet.name]) then return nil end

    return getCardDataCustomDeck(CustomDecks[cards[name].sheet.name], cards[name].sheet.position)
end

-- creates and returns a Data table representing a new custom deck (see getCardData)
-- data at the very least needs to contain CustomDeck, DeckIDs and ContainedObjects
function getDeckData(data)
    return {
        GUID = data.GUID or "000000",
        Name = data.Name or "Deck",
        Transform = {
            posX = (data.Transform and data.Transform.posX) or 0,
            posY = (data.Transform and data.Transform.posY) or 5,
            posZ = (data.Transform and data.Transform.posZ) or 0,
            rotX = (data.Transform and data.Transform.rotX) or 0,
            rotY = (data.Transform and data.Transform.rotY) or 180,
            rotZ = (data.Transform and data.Transform.rotZ) or 0,
            scaleX = (data.Transform and data.Transform.scaleX) or 1.5,
            scaleY = (data.Transform and data.Transform.scaleY) or 1,
            scaleZ = (data.Transform and data.Transform.scaleZ) or 1.5
        },
        Nickname = data.Nickname or "",
        Description = data.Description or "",
        GMNotes = data.GMNotes or "",
        ColorDiffuse = {
            r = (data.ColorDiffuse and data.ColorDiffuse.r) or 0.7132353,
            g = (data.ColorDiffuse and data.ColorDiffuse.g) or 0.7132353,
            b = (data.ColorDiffuse and data.ColorDiffuse.b) or 0.7132353,
            a = (data.ColorDiffuse and data.ColorDiffuse.a) or 1
        },
        LayoutGroupSortIndex = data.LayoutGroupSortIndex or 0,
        Value = data.Value or 0,
        Locked = data.Locked or false,
        Grid = data.Grid or true,
        Snap = data.Snap or true,
        IgnoreFoW = data.IgnoreFoW or false,
        MeasureMovement = data.MeasureMovement or false,
        DragSelectable = data.DragSelectable or true,
        Autoraise = data.Autoraise or true,
        Sticky = data.Sticky or true,
        Tooltip = data.Tooltip or true,
        GridProjection = data.GridProjection or false,
        HideWhenFaceDown = data.HideWhenFaceDown or true,
        Hands = data.Hands or false,
        SidewaysCard = data.SidewaysCard or false,
        DeckIDs = data.DeckIDs,
        CustomDeck = data.CustomDeck,
        LuaScript = data.LuaScript or "",
        LuaScriptState = data.LuaScriptState or "",
        XmlUI = data.XmlUI or "",
        ContainedObjects = data.ContainedObjects
    }
end

-- returns a deck data table using an array of card data tables
function getDeckDataTable(cardData)
    if not cardData then return nil end
    if #cardData < 1 then return nil end
    if #cardData < 2 then return cardData[1] end

    local t = {}
    t.DeckIDs = {}
    t.CustomDeck = {}
    t.ContainedObjects = cardData

    -- get the custom decks
    local customDeckIndex = 1
    for _, data in ipairs(t.ContainedObjects) do
        local deckID, customDeck = next(data.CustomDeck)
        local foundDeckID = nil

        for otherDeckID, otherCustomDeck in pairs(t.CustomDeck) do
            if otherCustomDeck == customDeck then
                foundDeckID = otherDeckID
                needsNew = false
                break
            end
        end

        if not foundDeckID then
            t.CustomDeck[customDeckIndex] = customDeck
            foundDeckID = customDeckIndex
            customDeckIndex = customDeckIndex + 1
        end

        data.CustomDeck = {
            [foundDeckID] = t.CustomDeck[foundDeckID]
        }
        local pos = data.CardID - (math.floor(data.CardID / 100) * 100)
        data.CardID = (foundDeckID * 100) + pos
    end

    -- get the deckIDs
    for i, data in ipairs(t.ContainedObjects) do
        t.DeckIDs[i] = data.CardID
    end

    return getDeckData(t)
end

-- returns a deck data table for a deck that has the cards in the card database for a table of given card names
function getDeckDataNames(names)
    if not names then return nil end
    if #names < 1 then return nil end
    if #names < 2 then return getCardDataName(names[1]) end
    for _, name in ipairs(names) do
        if not (cards[name] and cards[name].sheet and cards[name].sheet.name and cards[name].sheet.position and CustomDecks[cards[name].sheet.name]) then return nil end
    end

    local t = {}
    for i, name in ipairs(names) do
        t[i] = getCardDataName(name)
    end

    return getDeckDataTable(t)
end

spawnObjectDataOld = spawnObjectData
spawnObjectData = function(data)
    return spawnObjectDataOld({data = data})
end

-- converts three vectors into a transform table
function getTransform(pos, rot, scale)
    local transform = {}
    transform.posX = (pos and pos.x) or 0
    transform.posY = (pos and pos.y) or 1
    transform.posZ = (pos and pos.z) or 0
    transform.rotX = (rot and rot.x) or 0
    transform.rotY = (rot and rot.y) or 0
    transform.rotZ = (rot and rot.z) or 0
    transform.scaleX = (scale and scale.x) or 1
    transform.scaleY = (scale and scale.y) or 1
    transform.scaleZ = (scale and scale.z) or 1
    return transform
end

-- returns the first key found if a table has a value matching the given value and otherwise returns nil
function hasValue(table, value)
    for k, v in pairs(table) do
        if v == value then return k end
    end

    -- nothing matching was found
    return nil
end

-- returns the first key found if a table has a value matching any value in a given table and otherwise returns nil
function hasValueTable(table, values)
    for k, v in pairs(table) do
        if hasValue(values, v) then return k end
    end

    -- nothing matching was found
    return nil
end

-- shallowly compares two tables to see if they have the same values and keys
-- returns true if they match
function compareTables(a, b)
    local stringA, stringB = "", ""
    for _, value in pairs(a) do
        stringA = stringA .. tostring(value)
    end
    for _, value in pairs(b) do
        stringB = stringB .. tostring(value)
    end
    return stringA == stringB
end

-- returns the length of a table
function getCount(table)
    local count = 0
    for _ in pairs(table) do
        count = count + 1
    end
    return count
end

-- returns the sum of all values in a table (values must be numbers)
function sumTable(table)
    local result = 0

    for k, v in pairs(table) do
        result = result + v
    end

    return result
end

string.trim = function(s)
   return string.gsub(s, "^%s*(.-)%s*$", "%1")
end

-- returns a shallow copy of the given table
table.copy = function(table)
    local t = {}
    for k, v in pairs(table) do
        t[k] = v
    end
    return t
end

-- filters a table's key/values by using a given function which should return true for key/values that are kept
-- func is a funtion that takes the key, value, and the original table
-- returns a table with original keys and values filtered
table.filter = function(table, func)
    local result = {}

    for k, v in pairs(table) do
        if func(v, k, table) then result[k] = v end
    end

    return result
end

-- filters a table's key/values by using a given function which should return true for key/values that are kept
-- func is a funtion that takes the key, value, and the original table
-- returns a table with indexes for keys and the original values filtered
table.filterIndexed = function(table, func)
    local result = {}

    for k, v in pairs(table) do
        if func(v, k, table) then table.insert(result, v) end
    end

    return result
end

set = {}
set.mt = {}
function set.new(array)
    local t = {}
    if array then
        for _, v in ipairs(array) do
            if v then
                t[v] = true
            end
        end
    end
    setmetatable(t, set.mt)
    return t
end
function set.insert(s, value)
    s[value] = true
end
function set.toTable(s)
    local t = {}
    for k in pairs(s) do
        t[#t + 1] = k
    end
    return t
end
function set.union(a, b)
    if getmetatable(a) ~= set.mt or getmetatable(b) ~= set.mt then
        error("attempt to `add' a set with a non-set value", 2)
    end

    local result = set.new()
    for k in pairs(a) do result[k] = true end
    for k in pairs(b) do result[k] = true end
    return result
end
function set.difference(a, b)
    if getmetatable(a) ~= set.mt or getmetatable(b) ~= set.mt then
        error("attempt to `subtract' a set with a non-set value", 2)
    end

    local result = set.new()
    for k in pairs(a) do
        if not b[k] then
            result[k] = true
        end
    end
    return result
end
function set.intersection(a, b)
    if getmetatable(a) ~= set.mt or getmetatable(b) ~= set.mt then
        error("attempt to `multiply' a set with a non-set value", 2)
    end

    local result = set.new()
    for k in pairs(a) do
        if b[k] then
            result[k] = true
        end
    end
    return result
end
set.mt.__add = set.union
set.mt.__sub = set.difference
set.mt.__mul = set.intersection

-- takes a table and applies a function to all of its leaf nodes
-- if a value in the table is a table it will apply to function recursively to that table too
-- if the parameter passed in is a value it will just return func(value)
-- if the parameter passed in is a table it will return a table where all leaf nodes have had func applied to them
-- func is passed the key and value
function applyFunc(table, func)
    local output = {}

    if type(table) == "table" then
        for k, v in pairs(table) do
            if type(v) == "table" then
                output[k] = applyFunc(v, func)
            else
                output[k] = func(k, v)
            end
        end
    else
        return func(nil, table)
    end

    return output
end

-- returns the first index found for a button that has a given label
function getButtonIndex(label)
    local buttons = objects["Button Zone"].getButtons()

    for _, v in pairs(buttons) do
        if v.label == label then return v.index end
    end

    return nil
end

-- applies takeObject to a deck or just moves its position and rotation if it has a remainder or if its just a card
-- params is the table of parameters that takeObject uses (use GUID instead of index)
function safeTakeObject(object, params)
    local obj = nil
    if object.type ~= "Deck" or object.remainder then
        -- set the object in question to be the remainder
        if object.remainder then obj = object.remainder else obj = object end
        -- the object isn't even a deck so just move it using the transform functions
        if params.guid == nil or obj.guid == params.guid then
            -- check for rotation
            if params.rotation then obj.setRotation(params.rotation) end
            -- check for position
            if params.position then
                -- smooth move or set
                if params.smooth ~= false then
                    obj.setPositionSmooth(params.position, false, false)
                else
                    obj.setPosition(params.position)
                end
            end
        end
        -- takeObject is expected to return the object taken (but we aren't taking an object)
        return obj
    else
        -- its a deck with no remainder so just do takeObject as normal
        return object.takeObject(params)
    end
end