
function AutoCleanup(player)
    function CleanupCoroutine()
        local playArea = GetFirstObjectWithTag("Play Area")
        local deck = GetFirstObjectWithAllTags({"Deck", player.color})
        local discard = GetFirstObjectWithAllTags({"Discard", player.color})

        local discardedCardsFromPlay = CleanupUtils.DiscardFromPlay(playArea, discard)
        CleanupUtils.DiscardHand(player, discard)

        -- wait for cards being discarded to finish moving to discard pile
        CoroutineYieldUntil(
            function()
                for _, obj in pairs(discardedCardsFromPlay) do
                    if (not obj.isDestroyed() and obj.isSmoothMoving()) then
                        return false
                    end
                end

                return true
            end, 5)

        -- wait for discard pile to settle
        CleanupUtils.CoroutineYieldUntilPileSettled(discard)

        local amountDealt = CleanupUtils.DrawHand(player, deck, 5)

        if (amountDealt < 5) then
            -- wait just to make the animation more pleasing
            if (amountDealt > 0) then
                for i=1,20 do
                    coroutine.yield(0)
                end
            end

            CleanupUtils.ShuffleDiscard(deck, discard)
            -- wait for draw pile to settle
            CleanupUtils.CoroutineYieldUntilPileSettled(deck)
            CleanupUtils.DrawHand(player, deck, 5 - amountDealt)
        end

        return 1
    end

    if (player.seated) then
        startLuaCoroutine(self, "CleanupCoroutine")
    end
end

-- ///////////////////////////////////////////////////////////////////////////////// Cleanup steps

CleanupUtils = {}

-- Returns a list of cards discarded from play (for tracking purposes)
CleanupUtils.DiscardFromPlay = function(playArea, discard)
    local outDiscardedCards = {}

    if (playArea and discard) then
        local cardsInPlay = GetCardsAbove(playArea)
        cardsInPlay = table.filterIndexed(cardsInPlay, function (card) return not (card.locked or card.held_by_color or not card.interactable) end)
        for _, card in pairs(cardsInPlay) do
            card.setRotation(Vector(0, 180, 0))
            card.setPositionSmooth(discard.getPosition() + Vector(0,2,0), false, true)
            table.insert(outDiscardedCards, card)
        end
    end

    return outDiscardedCards
end

CleanupUtils.DiscardHand = function(player, discard)
    local cardsInHand = player.getHandObjects(1)
    cardsInHand = table.filterIndexed(cardsInHand, function (obj) return obj.type == "Card" end)

    if (discard) then
        for _, card in pairs(cardsInHand) do
            card.setPosition(discard.getPosition() + Vector(0,2,0))
        end
    end
end

-- Returns how many cards were successfully dealt
CleanupUtils.DrawHand = function(player, deck, amount)
    if (deck) then
        local cardsInDeck = GetCardsAbove(deck)[1]
        if (cardsInDeck) then
            local amountToDeal = math.min(cardsInDeck.getQuantity(), amount)
            if (cardsInDeck.type == "Card") then
                amountToDeal = 1
            end
            cardsInDeck.deal(amountToDeal, player.color)
            return amountToDeal
        end
    end

    return 0
end

CleanupUtils.ShuffleDiscard = function(deck, discard)
    if (deck and discard) then
        local cardsInDiscard = GetCardsAbove(discard)[1]
        if (cardsInDiscard) then
            cardsInDiscard.setRotation(Vector(0, 180, 180))
            cardsInDiscard.setPosition(deck.getPosition() + Vector(0,2,0))
            cardsInDiscard.shuffle()
        end
    end
end

CleanupUtils.CoroutineYieldUntilPileSettled = function(pile)
    CoroutineYieldUntil(
        function()
            if (pile) then
                local cardsFarAbove = GetCardsAbove(pile, 5)
                local cardsIn = GetCardsAbove(pile, 0.5)
                return (#cardsIn == 1 and #cardsFarAbove == 1 and cardsIn[1].getVelocity():magnitude() < 0.01) or #cardsFarAbove == 0
            end
            return true
        end, 5)
end
